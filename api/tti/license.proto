// Copyright Â© 2019 The Things Industries B.V.

syntax = "proto3";

package tti.lorawan.v3;

import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "lorawan-stack/api/enums.proto";
import "lorawan-stack/api/tti/identifiers.proto";

option go_package = "go.thethings.network/lorawan-stack/pkg/ttipb";

message License {
  // Immutable and unique public identifier for the API key.
  // Generated by the License Server.
  LicenseIdentifiers id = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];

  // Issuer of the license.
  LicenseIssuerIdentifiers license_issuer_ids = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];

  google.protobuf.Timestamp created_at = 3 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  // The license is not valid before this time.
  google.protobuf.Timestamp valid_from = 4 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  // The license is not valid after this time.
  google.protobuf.Timestamp valid_until = 5 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];

  // If set, only the given components can be started.
  repeated ttn.lorawan.v3.ClusterRole components = 6;
  // If set, the server addresses must match any of these regexps.
  repeated string address_regexps = 7;
  // If set, the configured DevAddr prefixes must match any of these prefixes.
  repeated bytes dev_addr_prefixes = 8 [(gogoproto.customtype) = "go.thethings.network/lorawan-stack/pkg/types.DevAddrPrefix", (gogoproto.nullable) = false];
  // If set, the configured JoinEUI prefixes must match any of these prefixes.
  repeated bytes join_eui_prefixes = 9 [(gogoproto.customtype) = "go.thethings.network/lorawan-stack/pkg/types.EUI64Prefix", (gogoproto.nullable) = false];
}

message LicenseKey {
  // The marshaled License message.
  bytes license = 1;

  message Signature {
    // The ID of the key used to sign license.
    string key_id = 1 [(gogoproto.customname) = "KeyID"];
    // Signature for license using the key identified by key_id.
    bytes signature = 2;
  }

  // Signatures for the license bytes. The LicenseKey is invalid if it does not
  // contain any signature with a known key_id or if it contains any invalid
  // signature.
  repeated Signature signatures = 2;
}
