// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/tti/license.proto

package ttipb

import (
	bytes "bytes"
	fmt "fmt"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
	time "time"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	ttnpb "go.thethings.network/lorawan-stack/pkg/ttnpb"
	go_thethings_network_lorawan_stack_pkg_types "go.thethings.network/lorawan-stack/pkg/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type License struct {
	// Immutable and unique public identifier for the API key.
	// Generated by the License Server.
	LicenseIdentifiers `protobuf:"bytes,1,opt,name=id,proto3,embedded=id" json:"id"`
	// Issuer of the license.
	LicenseIssuerIdentifiers `protobuf:"bytes,2,opt,name=license_issuer_ids,json=licenseIssuerIds,proto3,embedded=license_issuer_ids" json:"license_issuer_ids"`
	CreatedAt                time.Time `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	// The license is not valid before this time.
	ValidFrom time.Time `protobuf:"bytes,4,opt,name=valid_from,json=validFrom,proto3,stdtime" json:"valid_from"`
	// The license is not valid after this time.
	ValidUntil time.Time `protobuf:"bytes,5,opt,name=valid_until,json=validUntil,proto3,stdtime" json:"valid_until"`
	// If set, only the given components can be started.
	Components []ttnpb.ClusterRole `protobuf:"varint,6,rep,packed,name=components,proto3,enum=ttn.lorawan.v3.ClusterRole" json:"components,omitempty"`
	// If set, the server addresses must match any of these regexps.
	AddressRegexps []string `protobuf:"bytes,7,rep,name=address_regexps,json=addressRegexps,proto3" json:"address_regexps,omitempty"`
	// If set, the configured DevAddr prefixes must match any of these prefixes.
	DevAddrPrefixes []go_thethings_network_lorawan_stack_pkg_types.DevAddrPrefix `protobuf:"bytes,8,rep,name=dev_addr_prefixes,json=devAddrPrefixes,proto3,customtype=go.thethings.network/lorawan-stack/pkg/types.DevAddrPrefix" json:"dev_addr_prefixes"`
	// If set, the configured JoinEUI prefixes must match any of these prefixes.
	JoinEuiPrefixes      []go_thethings_network_lorawan_stack_pkg_types.EUI64Prefix `protobuf:"bytes,9,rep,name=join_eui_prefixes,json=joinEuiPrefixes,proto3,customtype=go.thethings.network/lorawan-stack/pkg/types.EUI64Prefix" json:"join_eui_prefixes"`
	XXX_NoUnkeyedLiteral struct{}                                                   `json:"-"`
	XXX_sizecache        int32                                                      `json:"-"`
}

func (m *License) Reset()      { *m = License{} }
func (*License) ProtoMessage() {}
func (*License) Descriptor() ([]byte, []int) {
	return fileDescriptor_09ba50819c0c2e19, []int{0}
}
func (m *License) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *License) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_License.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *License) XXX_Merge(src proto.Message) {
	xxx_messageInfo_License.Merge(m, src)
}
func (m *License) XXX_Size() int {
	return m.Size()
}
func (m *License) XXX_DiscardUnknown() {
	xxx_messageInfo_License.DiscardUnknown(m)
}

var xxx_messageInfo_License proto.InternalMessageInfo

func (m *License) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *License) GetValidFrom() time.Time {
	if m != nil {
		return m.ValidFrom
	}
	return time.Time{}
}

func (m *License) GetValidUntil() time.Time {
	if m != nil {
		return m.ValidUntil
	}
	return time.Time{}
}

func (m *License) GetComponents() []ttnpb.ClusterRole {
	if m != nil {
		return m.Components
	}
	return nil
}

func (m *License) GetAddressRegexps() []string {
	if m != nil {
		return m.AddressRegexps
	}
	return nil
}

type LicenseKey struct {
	// The marshaled License message.
	License []byte `protobuf:"bytes,1,opt,name=license,proto3" json:"license,omitempty"`
	// Signatures for the license bytes. The LicenseKey is invalid if it does not
	// contain any signature with a known key_id or if it contains any invalid
	// signature.
	Signatures           []*LicenseKey_Signature `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *LicenseKey) Reset()      { *m = LicenseKey{} }
func (*LicenseKey) ProtoMessage() {}
func (*LicenseKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_09ba50819c0c2e19, []int{1}
}
func (m *LicenseKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LicenseKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LicenseKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LicenseKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LicenseKey.Merge(m, src)
}
func (m *LicenseKey) XXX_Size() int {
	return m.Size()
}
func (m *LicenseKey) XXX_DiscardUnknown() {
	xxx_messageInfo_LicenseKey.DiscardUnknown(m)
}

var xxx_messageInfo_LicenseKey proto.InternalMessageInfo

func (m *LicenseKey) GetLicense() []byte {
	if m != nil {
		return m.License
	}
	return nil
}

func (m *LicenseKey) GetSignatures() []*LicenseKey_Signature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

type LicenseKey_Signature struct {
	// The ID of the key used to sign license.
	KeyID string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// Signature for license using the key identified by key_id.
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LicenseKey_Signature) Reset()      { *m = LicenseKey_Signature{} }
func (*LicenseKey_Signature) ProtoMessage() {}
func (*LicenseKey_Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_09ba50819c0c2e19, []int{1, 0}
}
func (m *LicenseKey_Signature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LicenseKey_Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LicenseKey_Signature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LicenseKey_Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LicenseKey_Signature.Merge(m, src)
}
func (m *LicenseKey_Signature) XXX_Size() int {
	return m.Size()
}
func (m *LicenseKey_Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_LicenseKey_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_LicenseKey_Signature proto.InternalMessageInfo

func (m *LicenseKey_Signature) GetKeyID() string {
	if m != nil {
		return m.KeyID
	}
	return ""
}

func (m *LicenseKey_Signature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*License)(nil), "tti.lorawan.v3.License")
	golang_proto.RegisterType((*License)(nil), "tti.lorawan.v3.License")
	proto.RegisterType((*LicenseKey)(nil), "tti.lorawan.v3.LicenseKey")
	golang_proto.RegisterType((*LicenseKey)(nil), "tti.lorawan.v3.LicenseKey")
	proto.RegisterType((*LicenseKey_Signature)(nil), "tti.lorawan.v3.LicenseKey.Signature")
	golang_proto.RegisterType((*LicenseKey_Signature)(nil), "tti.lorawan.v3.LicenseKey.Signature")
}

func init() {
	proto.RegisterFile("lorawan-stack/api/tti/license.proto", fileDescriptor_09ba50819c0c2e19)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/tti/license.proto", fileDescriptor_09ba50819c0c2e19)
}

var fileDescriptor_09ba50819c0c2e19 = []byte{
	// 730 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x3f, 0x4c, 0xfb, 0x46,
	0x14, 0xbe, 0x4b, 0x1a, 0xf8, 0xe5, 0x40, 0xfc, 0xf1, 0x64, 0xa5, 0xed, 0x25, 0xa2, 0x95, 0xc8,
	0xd0, 0xd8, 0x12, 0x54, 0x55, 0xd5, 0x2e, 0x25, 0x84, 0x4a, 0x51, 0x3a, 0x54, 0x6e, 0x59, 0xba,
	0x58, 0x4e, 0xfc, 0xe2, 0x5c, 0xe3, 0xf8, 0x2c, 0xdf, 0x39, 0xe0, 0x8d, 0x11, 0x75, 0x62, 0xec,
	0x58, 0x75, 0x62, 0x64, 0xa4, 0x1b, 0x23, 0x53, 0xc5, 0x88, 0x3a, 0xa4, 0xc4, 0x5e, 0x18, 0x19,
	0x51, 0xa7, 0x2a, 0x8e, 0x43, 0x82, 0x28, 0xd5, 0x8f, 0xed, 0xde, 0xbb, 0xef, 0x7d, 0x9f, 0xdf,
	0xe7, 0xef, 0xc8, 0x27, 0x2e, 0x0f, 0xac, 0x23, 0xcb, 0xab, 0x09, 0x69, 0x75, 0xfa, 0xba, 0xe5,
	0x33, 0x5d, 0x4a, 0xa6, 0xbb, 0xac, 0x03, 0x9e, 0x00, 0xcd, 0x0f, 0xb8, 0xe4, 0xca, 0x9a, 0x94,
	0x4c, 0xcb, 0x80, 0xda, 0x70, 0xb7, 0xb4, 0xe7, 0x30, 0xd9, 0x0b, 0xdb, 0x5a, 0x87, 0x0f, 0x74,
	0xf0, 0x86, 0x3c, 0xf2, 0x03, 0x7e, 0x1c, 0xe9, 0x29, 0xb8, 0x53, 0x73, 0xc0, 0xab, 0x0d, 0x2d,
	0x97, 0xd9, 0x96, 0x04, 0xfd, 0xc5, 0x61, 0x4a, 0x59, 0xaa, 0x2d, 0x50, 0x38, 0xdc, 0xe1, 0xd3,
	0xe1, 0x76, 0xd8, 0x4d, 0xab, 0xb4, 0x48, 0x4f, 0x19, 0xbc, 0xec, 0x70, 0xee, 0xb8, 0x30, 0x47,
	0x49, 0x36, 0x00, 0x21, 0xad, 0x81, 0x9f, 0x01, 0x3e, 0x7e, 0xb9, 0x07, 0x78, 0xe1, 0x40, 0x64,
	0xd7, 0xdb, 0xff, 0xbd, 0x26, 0xb3, 0xc1, 0x93, 0xac, 0xcb, 0x20, 0xc8, 0x80, 0x5b, 0x7f, 0x16,
	0xc8, 0xf2, 0x77, 0xd3, 0xe5, 0x95, 0x06, 0xc9, 0x31, 0x5b, 0xc5, 0x15, 0x5c, 0x5d, 0xd9, 0xd9,
	0xd2, 0x9e, 0x7b, 0xa0, 0x65, 0xa0, 0xe6, 0x9c, 0xa1, 0xbe, 0xf1, 0x4f, 0xbd, 0xf0, 0x0b, 0xce,
	0x6d, 0xe0, 0xeb, 0x51, 0x19, 0xdd, 0x8c, 0xca, 0xd8, 0xc8, 0x31, 0x5b, 0xe9, 0x11, 0x25, 0x73,
	0xd3, 0x64, 0x42, 0x84, 0x10, 0x98, 0xcc, 0x16, 0x6a, 0x2e, 0x65, 0xad, 0xbe, 0xc6, 0x9a, 0x02,
	0xff, 0x9f, 0x7b, 0xc3, 0x7d, 0x8e, 0x15, 0xca, 0x3e, 0x21, 0x9d, 0x00, 0x2c, 0x09, 0xb6, 0x69,
	0x49, 0x35, 0x9f, 0x2a, 0x94, 0xb4, 0xa9, 0x73, 0xda, 0xcc, 0x39, 0xed, 0xc7, 0x99, 0x73, 0xf5,
	0x77, 0x13, 0xae, 0xb3, 0xbf, 0xcb, 0xd8, 0x28, 0x66, 0x73, 0x7b, 0x72, 0x42, 0x92, 0xfe, 0x2a,
	0xb3, 0x1b, 0xf0, 0x81, 0xfa, 0xc1, 0x5b, 0x48, 0xd2, 0xb9, 0x6f, 0x03, 0x3e, 0x50, 0x0e, 0xc8,
	0xca, 0x94, 0x24, 0xf4, 0x24, 0x73, 0xd5, 0xc2, 0x1b, 0x58, 0xa6, 0xea, 0x87, 0x93, 0x39, 0xe5,
	0x6b, 0x42, 0x3a, 0x7c, 0xe0, 0x73, 0x0f, 0x3c, 0x29, 0xd4, 0xa5, 0x4a, 0xbe, 0xba, 0xb6, 0xf3,
	0xa1, 0x26, 0xa5, 0xb7, 0x68, 0xd9, 0xbe, 0x1b, 0x0a, 0x09, 0x81, 0xc1, 0x5d, 0x30, 0x16, 0xe0,
	0xca, 0x36, 0x59, 0xb7, 0x6c, 0x3b, 0x00, 0x21, 0xcc, 0x00, 0x1c, 0x38, 0xf6, 0x85, 0xba, 0x5c,
	0xc9, 0x57, 0x8b, 0xc6, 0x5a, 0xd6, 0x36, 0xa6, 0x5d, 0xc5, 0x23, 0x9b, 0x36, 0x0c, 0xcd, 0x49,
	0xd7, 0xf4, 0x03, 0xe8, 0xb2, 0x63, 0x10, 0xea, 0xbb, 0x4a, 0xbe, 0xba, 0x5a, 0xaf, 0x4f, 0x3e,
	0xeb, 0xaf, 0x51, 0xf9, 0x2b, 0x87, 0x6b, 0xb2, 0x07, 0xb2, 0xc7, 0x3c, 0x47, 0x68, 0x1e, 0xc8,
	0x23, 0x1e, 0xf4, 0xf5, 0xe7, 0x99, 0xf2, 0xfb, 0x8e, 0x2e, 0x23, 0x1f, 0x84, 0xd6, 0x80, 0xe1,
	0x9e, 0x6d, 0x07, 0xdf, 0xa7, 0x5c, 0xc6, 0xba, 0xbd, 0x58, 0x82, 0x50, 0x5c, 0xb2, 0xf9, 0x33,
	0x67, 0x9e, 0x09, 0x21, 0x9b, 0xeb, 0x15, 0x53, 0xbd, 0x6f, 0x32, 0xbd, 0x2f, 0xdf, 0xa4, 0x77,
	0x70, 0xd8, 0xfc, 0xe2, 0xf3, 0x99, 0xda, 0x84, 0xfa, 0x20, 0x64, 0x33, 0xb5, 0xad, 0x3f, 0x30,
	0x21, 0x59, 0xaa, 0x5a, 0x10, 0x29, 0x2a, 0x59, 0xce, 0x72, 0x93, 0x06, 0x7b, 0xd5, 0x98, 0x95,
	0x4a, 0x83, 0x10, 0xc1, 0x1c, 0xcf, 0x92, 0x61, 0x00, 0x93, 0x7c, 0xe6, 0xab, 0x2b, 0x3b, 0x9f,
	0xbe, 0x92, 0xcf, 0x16, 0x44, 0xda, 0x0f, 0x33, 0xb0, 0xb1, 0x30, 0x57, 0x6a, 0x91, 0xe2, 0xd3,
	0x85, 0x52, 0x21, 0x4b, 0x7d, 0x88, 0xcc, 0xec, 0x11, 0x15, 0xeb, 0xc5, 0x78, 0x54, 0x2e, 0xb4,
	0x20, 0x6a, 0x36, 0x8c, 0x42, 0x1f, 0xa2, 0xa6, 0xad, 0x7c, 0x44, 0x8a, 0x4f, 0xc3, 0xe9, 0x9b,
	0x58, 0x35, 0xe6, 0x8d, 0xfa, 0xef, 0xf8, 0x7a, 0x4c, 0xf1, 0xcd, 0x98, 0xe2, 0xdb, 0x31, 0x45,
	0x77, 0x63, 0x8a, 0xee, 0xc7, 0x14, 0x3d, 0x8c, 0x29, 0x7a, 0x1c, 0x53, 0x7c, 0x12, 0x53, 0x7c,
	0x1a, 0x53, 0x74, 0x1e, 0x53, 0x7c, 0x11, 0x53, 0x74, 0x19, 0x53, 0x74, 0x15, 0x53, 0x74, 0x1d,
	0x53, 0x7c, 0x13, 0x53, 0x7c, 0x1b, 0x53, 0x74, 0x17, 0x53, 0x7c, 0x1f, 0x53, 0xf4, 0x10, 0x53,
	0xfc, 0x18, 0x53, 0x74, 0x92, 0x50, 0x74, 0x9a, 0x50, 0x7c, 0x96, 0x50, 0xf4, 0x6b, 0x42, 0xf1,
	0x6f, 0x09, 0x45, 0xe7, 0x09, 0x45, 0x17, 0x09, 0xc5, 0x97, 0x09, 0xc5, 0x57, 0x09, 0xc5, 0x3f,
	0x7d, 0xf6, 0xbe, 0xee, 0x4b, 0xe6, 0xb7, 0xdb, 0x4b, 0x69, 0x9c, 0x77, 0xff, 0x0d, 0x00, 0x00,
	0xff, 0xff, 0xa9, 0x08, 0xc3, 0xd5, 0x4a, 0x05, 0x00, 0x00,
}

func (this *License) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*License)
	if !ok {
		that2, ok := that.(License)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LicenseIdentifiers.Equal(&that1.LicenseIdentifiers) {
		return false
	}
	if !this.LicenseIssuerIdentifiers.Equal(&that1.LicenseIssuerIdentifiers) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.ValidFrom.Equal(that1.ValidFrom) {
		return false
	}
	if !this.ValidUntil.Equal(that1.ValidUntil) {
		return false
	}
	if len(this.Components) != len(that1.Components) {
		return false
	}
	for i := range this.Components {
		if this.Components[i] != that1.Components[i] {
			return false
		}
	}
	if len(this.AddressRegexps) != len(that1.AddressRegexps) {
		return false
	}
	for i := range this.AddressRegexps {
		if this.AddressRegexps[i] != that1.AddressRegexps[i] {
			return false
		}
	}
	if len(this.DevAddrPrefixes) != len(that1.DevAddrPrefixes) {
		return false
	}
	for i := range this.DevAddrPrefixes {
		if !this.DevAddrPrefixes[i].Equal(that1.DevAddrPrefixes[i]) {
			return false
		}
	}
	if len(this.JoinEuiPrefixes) != len(that1.JoinEuiPrefixes) {
		return false
	}
	for i := range this.JoinEuiPrefixes {
		if !this.JoinEuiPrefixes[i].Equal(that1.JoinEuiPrefixes[i]) {
			return false
		}
	}
	return true
}
func (this *LicenseKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LicenseKey)
	if !ok {
		that2, ok := that.(LicenseKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.License, that1.License) {
		return false
	}
	if len(this.Signatures) != len(that1.Signatures) {
		return false
	}
	for i := range this.Signatures {
		if !this.Signatures[i].Equal(that1.Signatures[i]) {
			return false
		}
	}
	return true
}
func (this *LicenseKey_Signature) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LicenseKey_Signature)
	if !ok {
		that2, ok := that.(LicenseKey_Signature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.KeyID != that1.KeyID {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	return true
}
func (m *License) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *License) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLicense(dAtA, i, uint64(m.LicenseIdentifiers.Size()))
	n1, err := m.LicenseIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintLicense(dAtA, i, uint64(m.LicenseIssuerIdentifiers.Size()))
	n2, err := m.LicenseIssuerIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintLicense(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)))
	n3, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintLicense(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.ValidFrom)))
	n4, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ValidFrom, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x2a
	i++
	i = encodeVarintLicense(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.ValidUntil)))
	n5, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ValidUntil, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if len(m.Components) > 0 {
		dAtA7 := make([]byte, len(m.Components)*10)
		var j6 int
		for _, num := range m.Components {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintLicense(dAtA, i, uint64(j6))
		i += copy(dAtA[i:], dAtA7[:j6])
	}
	if len(m.AddressRegexps) > 0 {
		for _, s := range m.AddressRegexps {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.DevAddrPrefixes) > 0 {
		for _, msg := range m.DevAddrPrefixes {
			dAtA[i] = 0x42
			i++
			i = encodeVarintLicense(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.JoinEuiPrefixes) > 0 {
		for _, msg := range m.JoinEuiPrefixes {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintLicense(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LicenseKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LicenseKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.License) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLicense(dAtA, i, uint64(len(m.License)))
		i += copy(dAtA[i:], m.License)
	}
	if len(m.Signatures) > 0 {
		for _, msg := range m.Signatures {
			dAtA[i] = 0x12
			i++
			i = encodeVarintLicense(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LicenseKey_Signature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LicenseKey_Signature) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.KeyID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLicense(dAtA, i, uint64(len(m.KeyID)))
		i += copy(dAtA[i:], m.KeyID)
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLicense(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	return i, nil
}

func encodeVarintLicense(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedLicense(r randyLicense, easy bool) *License {
	this := &License{}
	v1 := NewPopulatedLicenseIdentifiers(r, easy)
	this.LicenseIdentifiers = *v1
	v2 := NewPopulatedLicenseIssuerIdentifiers(r, easy)
	this.LicenseIssuerIdentifiers = *v2
	v3 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.CreatedAt = *v3
	v4 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.ValidFrom = *v4
	v5 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.ValidUntil = *v5
	v6 := r.Intn(10)
	this.Components = make([]ttnpb.ClusterRole, v6)
	for i := 0; i < v6; i++ {
		this.Components[i] = ttnpb.ClusterRole([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}[r.Intn(10)])
	}
	v7 := r.Intn(10)
	this.AddressRegexps = make([]string, v7)
	for i := 0; i < v7; i++ {
		this.AddressRegexps[i] = randStringLicense(r)
	}
	v8 := r.Intn(10)
	this.DevAddrPrefixes = make([]go_thethings_network_lorawan_stack_pkg_types.DevAddrPrefix, v8)
	for i := 0; i < v8; i++ {
		v9 := go_thethings_network_lorawan_stack_pkg_types.NewPopulatedDevAddrPrefix(r)
		this.DevAddrPrefixes[i] = *v9
	}
	v10 := r.Intn(10)
	this.JoinEuiPrefixes = make([]go_thethings_network_lorawan_stack_pkg_types.EUI64Prefix, v10)
	for i := 0; i < v10; i++ {
		v11 := go_thethings_network_lorawan_stack_pkg_types.NewPopulatedEUI64Prefix(r)
		this.JoinEuiPrefixes[i] = *v11
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLicenseKey(r randyLicense, easy bool) *LicenseKey {
	this := &LicenseKey{}
	v12 := r.Intn(100)
	this.License = make([]byte, v12)
	for i := 0; i < v12; i++ {
		this.License[i] = byte(r.Intn(256))
	}
	if r.Intn(10) != 0 {
		v13 := r.Intn(5)
		this.Signatures = make([]*LicenseKey_Signature, v13)
		for i := 0; i < v13; i++ {
			this.Signatures[i] = NewPopulatedLicenseKey_Signature(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLicenseKey_Signature(r randyLicense, easy bool) *LicenseKey_Signature {
	this := &LicenseKey_Signature{}
	this.KeyID = randStringLicense(r)
	v14 := r.Intn(100)
	this.Signature = make([]byte, v14)
	for i := 0; i < v14; i++ {
		this.Signature[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyLicense interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneLicense(r randyLicense) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringLicense(r randyLicense) string {
	v15 := r.Intn(100)
	tmps := make([]rune, v15)
	for i := 0; i < v15; i++ {
		tmps[i] = randUTF8RuneLicense(r)
	}
	return string(tmps)
}
func randUnrecognizedLicense(r randyLicense, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldLicense(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldLicense(dAtA []byte, r randyLicense, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateLicense(dAtA, uint64(key))
		v16 := r.Int63()
		if r.Intn(2) == 0 {
			v16 *= -1
		}
		dAtA = encodeVarintPopulateLicense(dAtA, uint64(v16))
	case 1:
		dAtA = encodeVarintPopulateLicense(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateLicense(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateLicense(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateLicense(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateLicense(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *License) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LicenseIdentifiers.Size()
	n += 1 + l + sovLicense(uint64(l))
	l = m.LicenseIssuerIdentifiers.Size()
	n += 1 + l + sovLicense(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovLicense(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ValidFrom)
	n += 1 + l + sovLicense(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ValidUntil)
	n += 1 + l + sovLicense(uint64(l))
	if len(m.Components) > 0 {
		l = 0
		for _, e := range m.Components {
			l += sovLicense(uint64(e))
		}
		n += 1 + sovLicense(uint64(l)) + l
	}
	if len(m.AddressRegexps) > 0 {
		for _, s := range m.AddressRegexps {
			l = len(s)
			n += 1 + l + sovLicense(uint64(l))
		}
	}
	if len(m.DevAddrPrefixes) > 0 {
		for _, e := range m.DevAddrPrefixes {
			l = e.Size()
			n += 1 + l + sovLicense(uint64(l))
		}
	}
	if len(m.JoinEuiPrefixes) > 0 {
		for _, e := range m.JoinEuiPrefixes {
			l = e.Size()
			n += 1 + l + sovLicense(uint64(l))
		}
	}
	return n
}

func (m *LicenseKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.License)
	if l > 0 {
		n += 1 + l + sovLicense(uint64(l))
	}
	if len(m.Signatures) > 0 {
		for _, e := range m.Signatures {
			l = e.Size()
			n += 1 + l + sovLicense(uint64(l))
		}
	}
	return n
}

func (m *LicenseKey_Signature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KeyID)
	if l > 0 {
		n += 1 + l + sovLicense(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovLicense(uint64(l))
	}
	return n
}

func sovLicense(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLicense(x uint64) (n int) {
	return sovLicense((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *License) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&License{`,
		`LicenseIdentifiers:` + strings.Replace(strings.Replace(this.LicenseIdentifiers.String(), "LicenseIdentifiers", "LicenseIdentifiers", 1), `&`, ``, 1) + `,`,
		`LicenseIssuerIdentifiers:` + strings.Replace(strings.Replace(this.LicenseIssuerIdentifiers.String(), "LicenseIssuerIdentifiers", "LicenseIssuerIdentifiers", 1), `&`, ``, 1) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(this.CreatedAt.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`ValidFrom:` + strings.Replace(strings.Replace(this.ValidFrom.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`ValidUntil:` + strings.Replace(strings.Replace(this.ValidUntil.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`Components:` + fmt.Sprintf("%v", this.Components) + `,`,
		`AddressRegexps:` + fmt.Sprintf("%v", this.AddressRegexps) + `,`,
		`DevAddrPrefixes:` + fmt.Sprintf("%v", this.DevAddrPrefixes) + `,`,
		`JoinEuiPrefixes:` + fmt.Sprintf("%v", this.JoinEuiPrefixes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LicenseKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LicenseKey{`,
		`License:` + fmt.Sprintf("%v", this.License) + `,`,
		`Signatures:` + strings.Replace(fmt.Sprintf("%v", this.Signatures), "LicenseKey_Signature", "LicenseKey_Signature", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LicenseKey_Signature) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LicenseKey_Signature{`,
		`KeyID:` + fmt.Sprintf("%v", this.KeyID) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLicense(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *License) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLicense
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: License: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: License: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LicenseIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLicense
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LicenseIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LicenseIssuerIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLicense
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LicenseIssuerIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLicense
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidFrom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLicense
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ValidFrom, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidUntil", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLicense
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ValidUntil, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v ttnpb.ClusterRole
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLicense
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ttnpb.ClusterRole(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Components = append(m.Components, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLicense
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLicense
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLicense
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Components) == 0 {
					m.Components = make([]ttnpb.ClusterRole, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ttnpb.ClusterRole
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLicense
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ttnpb.ClusterRole(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Components = append(m.Components, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Components", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressRegexps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLicense
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressRegexps = append(m.AddressRegexps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddrPrefixes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLicense
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v go_thethings_network_lorawan_stack_pkg_types.DevAddrPrefix
			m.DevAddrPrefixes = append(m.DevAddrPrefixes, v)
			if err := m.DevAddrPrefixes[len(m.DevAddrPrefixes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinEuiPrefixes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLicense
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v go_thethings_network_lorawan_stack_pkg_types.EUI64Prefix
			m.JoinEuiPrefixes = append(m.JoinEuiPrefixes, v)
			if err := m.JoinEuiPrefixes[len(m.JoinEuiPrefixes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLicense(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLicense
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLicense
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LicenseKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLicense
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LicenseKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LicenseKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field License", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLicense
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.License = append(m.License[:0], dAtA[iNdEx:postIndex]...)
			if m.License == nil {
				m.License = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLicense
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, &LicenseKey_Signature{})
			if err := m.Signatures[len(m.Signatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLicense(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLicense
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLicense
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LicenseKey_Signature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLicense
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLicense
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLicense
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLicense(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLicense
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLicense
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLicense(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLicense
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLicense
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthLicense
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLicense
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLicense(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthLicense
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLicense = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLicense   = fmt.Errorf("proto: integer overflow")
)
