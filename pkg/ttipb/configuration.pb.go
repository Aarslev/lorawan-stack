// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/tti/configuration.proto

package ttipb

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Configuration struct {
	// Default cluster configuration.
	DefaultCluster       *Configuration_Cluster `protobuf:"bytes,2,opt,name=default_cluster,json=defaultCluster,proto3" json:"default_cluster,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Configuration) Reset()      { *m = Configuration{} }
func (*Configuration) ProtoMessage() {}
func (*Configuration) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cc10cab306641c7, []int{0}
}
func (m *Configuration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Configuration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Configuration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Configuration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Configuration.Merge(m, src)
}
func (m *Configuration) XXX_Size() int {
	return m.Size()
}
func (m *Configuration) XXX_DiscardUnknown() {
	xxx_messageInfo_Configuration.DiscardUnknown(m)
}

var xxx_messageInfo_Configuration proto.InternalMessageInfo

func (m *Configuration) GetDefaultCluster() *Configuration_Cluster {
	if m != nil {
		return m.DefaultCluster
	}
	return nil
}

type Configuration_UI struct {
	BrandingBaseURL      string   `protobuf:"bytes,1,opt,name=branding_base_url,json=brandingBaseUrl,proto3" json:"branding_base_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Configuration_UI) Reset()      { *m = Configuration_UI{} }
func (*Configuration_UI) ProtoMessage() {}
func (*Configuration_UI) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cc10cab306641c7, []int{0, 0}
}
func (m *Configuration_UI) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Configuration_UI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Configuration_UI.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Configuration_UI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Configuration_UI.Merge(m, src)
}
func (m *Configuration_UI) XXX_Size() int {
	return m.Size()
}
func (m *Configuration_UI) XXX_DiscardUnknown() {
	xxx_messageInfo_Configuration_UI.DiscardUnknown(m)
}

var xxx_messageInfo_Configuration_UI proto.InternalMessageInfo

func (m *Configuration_UI) GetBrandingBaseURL() string {
	if m != nil {
		return m.BrandingBaseURL
	}
	return ""
}

type Configuration_Cluster struct {
	UI                   *Configuration_UI `protobuf:"bytes,1,opt,name=ui,proto3" json:"ui,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Configuration_Cluster) Reset()      { *m = Configuration_Cluster{} }
func (*Configuration_Cluster) ProtoMessage() {}
func (*Configuration_Cluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cc10cab306641c7, []int{0, 1}
}
func (m *Configuration_Cluster) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Configuration_Cluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Configuration_Cluster.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Configuration_Cluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Configuration_Cluster.Merge(m, src)
}
func (m *Configuration_Cluster) XXX_Size() int {
	return m.Size()
}
func (m *Configuration_Cluster) XXX_DiscardUnknown() {
	xxx_messageInfo_Configuration_Cluster.DiscardUnknown(m)
}

var xxx_messageInfo_Configuration_Cluster proto.InternalMessageInfo

func (m *Configuration_Cluster) GetUI() *Configuration_UI {
	if m != nil {
		return m.UI
	}
	return nil
}

func init() {
	proto.RegisterType((*Configuration)(nil), "tti.lorawan.v3.Configuration")
	golang_proto.RegisterType((*Configuration)(nil), "tti.lorawan.v3.Configuration")
	proto.RegisterType((*Configuration_UI)(nil), "tti.lorawan.v3.Configuration.UI")
	golang_proto.RegisterType((*Configuration_UI)(nil), "tti.lorawan.v3.Configuration.UI")
	proto.RegisterType((*Configuration_Cluster)(nil), "tti.lorawan.v3.Configuration.Cluster")
	golang_proto.RegisterType((*Configuration_Cluster)(nil), "tti.lorawan.v3.Configuration.Cluster")
}

func init() {
	proto.RegisterFile("lorawan-stack/api/tti/configuration.proto", fileDescriptor_1cc10cab306641c7)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/tti/configuration.proto", fileDescriptor_1cc10cab306641c7)
}

var fileDescriptor_1cc10cab306641c7 = []byte{
	// 424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x31, 0x68, 0xdb, 0x40,
	0x14, 0x86, 0xef, 0x69, 0x48, 0xa9, 0x42, 0x63, 0xea, 0x2e, 0xc1, 0xc3, 0x8b, 0x29, 0x14, 0x52,
	0xa8, 0x4f, 0x90, 0x2c, 0xdd, 0x4a, 0x65, 0x3a, 0x18, 0x4a, 0x07, 0x83, 0x97, 0x2e, 0xe6, 0x24,
	0x9f, 0xcf, 0x87, 0xd5, 0x3b, 0x71, 0x3a, 0x39, 0xcd, 0x96, 0x31, 0x63, 0xc7, 0x8e, 0xa5, 0x53,
	0xc6, 0x8c, 0x19, 0x33, 0x66, 0xcc, 0x98, 0x29, 0x44, 0x77, 0x4b, 0xa0, 0x4b, 0xc6, 0x8c, 0xa5,
	0x92, 0x06, 0x9b, 0x42, 0xb6, 0xf7, 0xdf, 0xfd, 0xdf, 0xcf, 0x0f, 0xef, 0x85, 0x6f, 0x33, 0x6d,
	0xd8, 0x11, 0x53, 0x83, 0xc2, 0xb2, 0x74, 0x19, 0xb1, 0x5c, 0x46, 0xd6, 0xca, 0x28, 0xd5, 0x6a,
	0x2e, 0x45, 0x69, 0x98, 0x95, 0x5a, 0xd1, 0xdc, 0x68, 0xab, 0xbb, 0x3b, 0xd6, 0x4a, 0xda, 0xda,
	0xe9, 0xea, 0xb0, 0xf7, 0x51, 0x48, 0xbb, 0x28, 0x13, 0x9a, 0xea, 0x6f, 0x11, 0x57, 0x2b, 0x7d,
	0x9c, 0x1b, 0xfd, 0xfd, 0x38, 0xaa, 0xcd, 0xe9, 0x40, 0x70, 0x35, 0x58, 0xb1, 0x4c, 0xce, 0x98,
	0xe5, 0xd1, 0x7f, 0x43, 0x13, 0xd9, 0x1b, 0xac, 0x45, 0x08, 0x2d, 0x74, 0x03, 0x27, 0xe5, 0xbc,
	0x56, 0xb5, 0xa8, 0xa7, 0xc6, 0xfe, 0xfa, 0x0f, 0x84, 0x2f, 0x86, 0xeb, 0xcd, 0xba, 0x5f, 0xc2,
	0xce, 0x8c, 0xcf, 0x59, 0x99, 0xd9, 0x69, 0x9a, 0x95, 0x85, 0xe5, 0x66, 0x37, 0xe8, 0xc3, 0xfe,
	0xf6, 0xc1, 0x1b, 0xba, 0xd9, 0x96, 0x6e, 0x70, 0x74, 0xd8, 0x98, 0xc7, 0x3b, 0x2d, 0xdd, 0xea,
	0xde, 0xa7, 0x30, 0x98, 0x8c, 0xba, 0x1f, 0xc2, 0x97, 0x89, 0x61, 0x6a, 0x26, 0x95, 0x98, 0x26,
	0xac, 0xe0, 0xd3, 0xd2, 0x64, 0xbb, 0xd0, 0x87, 0xfd, 0xe7, 0xf1, 0x2b, 0x77, 0xbb, 0xd7, 0x89,
	0xdb, 0xcf, 0x98, 0x15, 0x7c, 0x32, 0xfe, 0x3c, 0xee, 0x24, 0xeb, 0x0f, 0x26, 0xeb, 0x0d, 0xc3,
	0x67, 0x6d, 0x62, 0xf7, 0x7d, 0x18, 0x94, 0xb2, 0x86, 0xb7, 0x0f, 0xfa, 0x4f, 0x97, 0x9a, 0x8c,
	0xe2, 0x2d, 0x77, 0xbb, 0x17, 0x4c, 0x46, 0xe3, 0xa0, 0x94, 0xf1, 0x6f, 0xb8, 0xaa, 0x10, 0xae,
	0x2b, 0x84, 0x9b, 0x0a, 0xc9, 0x5d, 0x85, 0xe4, 0xbe, 0x42, 0xf2, 0x50, 0x21, 0x79, 0xac, 0x10,
	0x4e, 0x1c, 0xc2, 0xa9, 0x43, 0x72, 0xe6, 0x10, 0xce, 0x1d, 0x92, 0x0b, 0x87, 0xe4, 0xd2, 0x21,
	0xb9, 0x72, 0x08, 0xd7, 0x0e, 0xe1, 0xc6, 0x21, 0xb9, 0x73, 0x08, 0xf7, 0x0e, 0xc9, 0x83, 0x43,
	0x78, 0x74, 0x48, 0x4e, 0x3c, 0x92, 0x53, 0x8f, 0xf0, 0xc3, 0x23, 0xf9, 0xe9, 0x11, 0x7e, 0x79,
	0x24, 0x67, 0x1e, 0xc9, 0xb9, 0x47, 0xb8, 0xf0, 0x08, 0x97, 0x1e, 0xe1, 0xeb, 0x3b, 0xa1, 0xa9,
	0x5d, 0x70, 0xbb, 0x90, 0x4a, 0x14, 0x54, 0x71, 0x7b, 0xa4, 0xcd, 0x32, 0xda, 0x3c, 0x93, 0x7c,
	0x29, 0xfe, 0x9d, 0x49, 0x9e, 0x24, 0x5b, 0xf5, 0x66, 0x0e, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff,
	0x56, 0x36, 0xec, 0xfe, 0x48, 0x02, 0x00, 0x00,
}

func (this *Configuration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Configuration)
	if !ok {
		that2, ok := that.(Configuration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultCluster.Equal(that1.DefaultCluster) {
		return false
	}
	return true
}
func (this *Configuration_UI) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Configuration_UI)
	if !ok {
		that2, ok := that.(Configuration_UI)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BrandingBaseURL != that1.BrandingBaseURL {
		return false
	}
	return true
}
func (this *Configuration_Cluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Configuration_Cluster)
	if !ok {
		that2, ok := that.(Configuration_Cluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UI.Equal(that1.UI) {
		return false
	}
	return true
}
func (m *Configuration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Configuration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Configuration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DefaultCluster != nil {
		{
			size, err := m.DefaultCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfiguration(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *Configuration_UI) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Configuration_UI) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Configuration_UI) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BrandingBaseURL) > 0 {
		i -= len(m.BrandingBaseURL)
		copy(dAtA[i:], m.BrandingBaseURL)
		i = encodeVarintConfiguration(dAtA, i, uint64(len(m.BrandingBaseURL)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Configuration_Cluster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Configuration_Cluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Configuration_Cluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UI != nil {
		{
			size, err := m.UI.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfiguration(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintConfiguration(dAtA []byte, offset int, v uint64) int {
	offset -= sovConfiguration(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedConfiguration(r randyConfiguration, easy bool) *Configuration {
	this := &Configuration{}
	if r.Intn(5) != 0 {
		this.DefaultCluster = NewPopulatedConfiguration_Cluster(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedConfiguration_UI(r randyConfiguration, easy bool) *Configuration_UI {
	this := &Configuration_UI{}
	this.BrandingBaseURL = randStringConfiguration(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedConfiguration_Cluster(r randyConfiguration, easy bool) *Configuration_Cluster {
	this := &Configuration_Cluster{}
	if r.Intn(5) != 0 {
		this.UI = NewPopulatedConfiguration_UI(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyConfiguration interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneConfiguration(r randyConfiguration) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringConfiguration(r randyConfiguration) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneConfiguration(r)
	}
	return string(tmps)
}
func randUnrecognizedConfiguration(r randyConfiguration, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldConfiguration(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldConfiguration(dAtA []byte, r randyConfiguration, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateConfiguration(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateConfiguration(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateConfiguration(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateConfiguration(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateConfiguration(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateConfiguration(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateConfiguration(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Configuration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultCluster != nil {
		l = m.DefaultCluster.Size()
		n += 1 + l + sovConfiguration(uint64(l))
	}
	return n
}

func (m *Configuration_UI) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BrandingBaseURL)
	if l > 0 {
		n += 1 + l + sovConfiguration(uint64(l))
	}
	return n
}

func (m *Configuration_Cluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UI != nil {
		l = m.UI.Size()
		n += 1 + l + sovConfiguration(uint64(l))
	}
	return n
}

func sovConfiguration(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConfiguration(x uint64) (n int) {
	return sovConfiguration((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *Configuration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Configuration{`,
		`DefaultCluster:` + strings.Replace(fmt.Sprintf("%v", this.DefaultCluster), "Configuration_Cluster", "Configuration_Cluster", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Configuration_UI) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Configuration_UI{`,
		`BrandingBaseURL:` + fmt.Sprintf("%v", this.BrandingBaseURL) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Configuration_Cluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Configuration_Cluster{`,
		`UI:` + strings.Replace(fmt.Sprintf("%v", this.UI), "Configuration_UI", "Configuration_UI", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringConfiguration(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Configuration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfiguration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Configuration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Configuration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfiguration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultCluster == nil {
				m.DefaultCluster = &Configuration_Cluster{}
			}
			if err := m.DefaultCluster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfiguration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfiguration
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfiguration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Configuration_UI) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfiguration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UI: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UI: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandingBaseURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfiguration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrandingBaseURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfiguration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfiguration
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfiguration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Configuration_Cluster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfiguration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cluster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cluster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UI", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfiguration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UI == nil {
				m.UI = &Configuration_UI{}
			}
			if err := m.UI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfiguration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfiguration
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfiguration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfiguration(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfiguration
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConfiguration
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConfiguration
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConfiguration
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConfiguration        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfiguration          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConfiguration = fmt.Errorf("proto: unexpected end of group")
)
