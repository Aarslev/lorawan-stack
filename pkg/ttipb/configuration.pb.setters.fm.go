// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttipb

import fmt "fmt"

func (dst *Configuration) SetFields(src *Configuration, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "default_cluster":
			if len(subs) > 0 {
				newDst := dst.DefaultCluster
				if newDst == nil {
					newDst = &Configuration_Cluster{}
					dst.DefaultCluster = newDst
				}
				var newSrc *Configuration_Cluster
				if src != nil {
					newSrc = src.DefaultCluster
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.DefaultCluster = src.DefaultCluster
				} else {
					dst.DefaultCluster = nil
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *Configuration_UI) SetFields(src *Configuration_UI, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "branding_base_url":
			if len(subs) > 0 {
				return fmt.Errorf("'branding_base_url' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.BrandingBaseURL = src.BrandingBaseURL
			} else {
				var zero string
				dst.BrandingBaseURL = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *Configuration_Cluster) SetFields(src *Configuration_Cluster, paths ...string) error {
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "ui":
			if len(subs) > 0 {
				newDst := dst.UI
				if newDst == nil {
					newDst = &Configuration_UI{}
					dst.UI = newDst
				}
				var newSrc *Configuration_UI
				if src != nil {
					newSrc = src.UI
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.UI = src.UI
				} else {
					dst.UI = nil
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}
