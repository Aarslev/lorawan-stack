// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttipb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// define the regex for a UUID once up-front
var _configuration_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// ValidateFields checks the field values on Configuration with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Configuration) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = ConfigurationFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "default_cluster":

			if v, ok := interface{}(m.GetDefaultCluster()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return ConfigurationValidationError{
						field:  "default_cluster",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return ConfigurationValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// ConfigurationValidationError is the validation error returned by
// Configuration.ValidateFields if the designated constraints aren't met.
type ConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigurationValidationError) ErrorName() string { return "ConfigurationValidationError" }

// Error satisfies the builtin error interface
func (e ConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigurationValidationError{}

// ValidateFields checks the field values on Configuration_UI with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Configuration_UI) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = Configuration_UIFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "branding_base_url":
			// no validation rules for BrandingBaseURL
		default:
			return Configuration_UIValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// Configuration_UIValidationError is the validation error returned by
// Configuration_UI.ValidateFields if the designated constraints aren't met.
type Configuration_UIValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Configuration_UIValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Configuration_UIValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Configuration_UIValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Configuration_UIValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Configuration_UIValidationError) ErrorName() string { return "Configuration_UIValidationError" }

// Error satisfies the builtin error interface
func (e Configuration_UIValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfiguration_UI.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Configuration_UIValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Configuration_UIValidationError{}

// ValidateFields checks the field values on Configuration_Cluster with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Configuration_Cluster) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = Configuration_ClusterFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "ui":

			if v, ok := interface{}(m.GetUI()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_ClusterValidationError{
						field:  "ui",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return Configuration_ClusterValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// Configuration_ClusterValidationError is the validation error returned by
// Configuration_Cluster.ValidateFields if the designated constraints aren't met.
type Configuration_ClusterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Configuration_ClusterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Configuration_ClusterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Configuration_ClusterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Configuration_ClusterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Configuration_ClusterValidationError) ErrorName() string {
	return "Configuration_ClusterValidationError"
}

// Error satisfies the builtin error interface
func (e Configuration_ClusterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfiguration_Cluster.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Configuration_ClusterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Configuration_ClusterValidationError{}
