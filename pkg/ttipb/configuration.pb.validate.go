// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttipb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// define the regex for a UUID once up-front
var _configuration_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// ValidateFields checks the field values on Configuration with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Configuration) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = ConfigurationFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "default_cluster":

			if v, ok := interface{}(m.GetDefaultCluster()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return ConfigurationValidationError{
						field:  "default_cluster",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return ConfigurationValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// ConfigurationValidationError is the validation error returned by
// Configuration.ValidateFields if the designated constraints aren't met.
type ConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigurationValidationError) ErrorName() string { return "ConfigurationValidationError" }

// Error satisfies the builtin error interface
func (e ConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigurationValidationError{}

// ValidateFields checks the field values on Configuration_UI with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Configuration_UI) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = Configuration_UIFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "branding_base_url":
			// no validation rules for BrandingBaseURL
		default:
			return Configuration_UIValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// Configuration_UIValidationError is the validation error returned by
// Configuration_UI.ValidateFields if the designated constraints aren't met.
type Configuration_UIValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Configuration_UIValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Configuration_UIValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Configuration_UIValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Configuration_UIValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Configuration_UIValidationError) ErrorName() string { return "Configuration_UIValidationError" }

// Error satisfies the builtin error interface
func (e Configuration_UIValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfiguration_UI.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Configuration_UIValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Configuration_UIValidationError{}

// ValidateFields checks the field values on Configuration_Cluster with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Configuration_Cluster) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = Configuration_ClusterFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "ui":

			if v, ok := interface{}(m.GetUI()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_ClusterValidationError{
						field:  "ui",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "is":

			if v, ok := interface{}(m.GetIS()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_ClusterValidationError{
						field:  "is",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "ns":

			if v, ok := interface{}(m.GetNS()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_ClusterValidationError{
						field:  "ns",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return Configuration_ClusterValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// Configuration_ClusterValidationError is the validation error returned by
// Configuration_Cluster.ValidateFields if the designated constraints aren't met.
type Configuration_ClusterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Configuration_ClusterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Configuration_ClusterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Configuration_ClusterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Configuration_ClusterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Configuration_ClusterValidationError) ErrorName() string {
	return "Configuration_ClusterValidationError"
}

// Error satisfies the builtin error interface
func (e Configuration_ClusterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfiguration_Cluster.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Configuration_ClusterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Configuration_ClusterValidationError{}

// ValidateFields checks the field values on
// Configuration_Cluster_IdentityServer with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Configuration_Cluster_IdentityServer) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = Configuration_Cluster_IdentityServerFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "user_registration":

			if v, ok := interface{}(m.GetUserRegistration()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_Cluster_IdentityServerValidationError{
						field:  "user_registration",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "profile_picture":

			if v, ok := interface{}(m.GetProfilePicture()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_Cluster_IdentityServerValidationError{
						field:  "profile_picture",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "end_device_picture":

			if v, ok := interface{}(m.GetEndDevicePicture()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_Cluster_IdentityServerValidationError{
						field:  "end_device_picture",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "user_rights":

			if v, ok := interface{}(m.GetUserRights()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_Cluster_IdentityServerValidationError{
						field:  "user_rights",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "oauth":

			if v, ok := interface{}(m.GetOAuth()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_Cluster_IdentityServerValidationError{
						field:  "oauth",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return Configuration_Cluster_IdentityServerValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// Configuration_Cluster_IdentityServerValidationError is the validation error
// returned by Configuration_Cluster_IdentityServer.ValidateFields if the
// designated constraints aren't met.
type Configuration_Cluster_IdentityServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Configuration_Cluster_IdentityServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Configuration_Cluster_IdentityServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Configuration_Cluster_IdentityServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Configuration_Cluster_IdentityServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Configuration_Cluster_IdentityServerValidationError) ErrorName() string {
	return "Configuration_Cluster_IdentityServerValidationError"
}

// Error satisfies the builtin error interface
func (e Configuration_Cluster_IdentityServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfiguration_Cluster_IdentityServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Configuration_Cluster_IdentityServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Configuration_Cluster_IdentityServerValidationError{}

// ValidateFields checks the field values on
// Configuration_Cluster_NetworkServer with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Configuration_Cluster_NetworkServer) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = Configuration_Cluster_NetworkServerFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "dev_addr_prefixes":

		case "deduplication_window":

			if v, ok := interface{}(m.GetDeduplicationWindow()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_Cluster_NetworkServerValidationError{
						field:  "deduplication_window",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "cooldown_window":

			if v, ok := interface{}(m.GetCooldownWindow()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_Cluster_NetworkServerValidationError{
						field:  "cooldown_window",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return Configuration_Cluster_NetworkServerValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// Configuration_Cluster_NetworkServerValidationError is the validation error
// returned by Configuration_Cluster_NetworkServer.ValidateFields if the
// designated constraints aren't met.
type Configuration_Cluster_NetworkServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Configuration_Cluster_NetworkServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Configuration_Cluster_NetworkServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Configuration_Cluster_NetworkServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Configuration_Cluster_NetworkServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Configuration_Cluster_NetworkServerValidationError) ErrorName() string {
	return "Configuration_Cluster_NetworkServerValidationError"
}

// Error satisfies the builtin error interface
func (e Configuration_Cluster_NetworkServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfiguration_Cluster_NetworkServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Configuration_Cluster_NetworkServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Configuration_Cluster_NetworkServerValidationError{}

// ValidateFields checks the field values on
// Configuration_Cluster_IdentityServer_UserRegistration with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Configuration_Cluster_IdentityServer_UserRegistration) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = Configuration_Cluster_IdentityServer_UserRegistrationFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "invitation":

			if v, ok := interface{}(m.GetInvitation()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_Cluster_IdentityServer_UserRegistrationValidationError{
						field:  "invitation",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "contact_info_validation":

			if v, ok := interface{}(m.GetContactInfoValidation()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_Cluster_IdentityServer_UserRegistrationValidationError{
						field:  "contact_info_validation",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "admin_approval":

			if v, ok := interface{}(m.GetAdminApproval()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_Cluster_IdentityServer_UserRegistrationValidationError{
						field:  "admin_approval",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "password_requirements":

			if v, ok := interface{}(m.GetPasswordRequirements()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_Cluster_IdentityServer_UserRegistrationValidationError{
						field:  "password_requirements",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return Configuration_Cluster_IdentityServer_UserRegistrationValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// Configuration_Cluster_IdentityServer_UserRegistrationValidationError is the
// validation error returned by
// Configuration_Cluster_IdentityServer_UserRegistration.ValidateFields if the
// designated constraints aren't met.
type Configuration_Cluster_IdentityServer_UserRegistrationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Configuration_Cluster_IdentityServer_UserRegistrationValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e Configuration_Cluster_IdentityServer_UserRegistrationValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e Configuration_Cluster_IdentityServer_UserRegistrationValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e Configuration_Cluster_IdentityServer_UserRegistrationValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e Configuration_Cluster_IdentityServer_UserRegistrationValidationError) ErrorName() string {
	return "Configuration_Cluster_IdentityServer_UserRegistrationValidationError"
}

// Error satisfies the builtin error interface
func (e Configuration_Cluster_IdentityServer_UserRegistrationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfiguration_Cluster_IdentityServer_UserRegistration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Configuration_Cluster_IdentityServer_UserRegistrationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Configuration_Cluster_IdentityServer_UserRegistrationValidationError{}

// ValidateFields checks the field values on
// Configuration_Cluster_IdentityServer_ProfilePicture with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Configuration_Cluster_IdentityServer_ProfilePicture) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = Configuration_Cluster_IdentityServer_ProfilePictureFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "disable_upload":

			if v, ok := interface{}(m.GetDisableUpload()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_Cluster_IdentityServer_ProfilePictureValidationError{
						field:  "disable_upload",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "use_gravatar":

			if v, ok := interface{}(m.GetUseGravatar()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_Cluster_IdentityServer_ProfilePictureValidationError{
						field:  "use_gravatar",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return Configuration_Cluster_IdentityServer_ProfilePictureValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// Configuration_Cluster_IdentityServer_ProfilePictureValidationError is the
// validation error returned by
// Configuration_Cluster_IdentityServer_ProfilePicture.ValidateFields if the
// designated constraints aren't met.
type Configuration_Cluster_IdentityServer_ProfilePictureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Configuration_Cluster_IdentityServer_ProfilePictureValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e Configuration_Cluster_IdentityServer_ProfilePictureValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e Configuration_Cluster_IdentityServer_ProfilePictureValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e Configuration_Cluster_IdentityServer_ProfilePictureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Configuration_Cluster_IdentityServer_ProfilePictureValidationError) ErrorName() string {
	return "Configuration_Cluster_IdentityServer_ProfilePictureValidationError"
}

// Error satisfies the builtin error interface
func (e Configuration_Cluster_IdentityServer_ProfilePictureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfiguration_Cluster_IdentityServer_ProfilePicture.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Configuration_Cluster_IdentityServer_ProfilePictureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Configuration_Cluster_IdentityServer_ProfilePictureValidationError{}

// ValidateFields checks the field values on
// Configuration_Cluster_IdentityServer_EndDevicePicture with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Configuration_Cluster_IdentityServer_EndDevicePicture) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = Configuration_Cluster_IdentityServer_EndDevicePictureFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "disable_upload":

			if v, ok := interface{}(m.GetDisableUpload()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_Cluster_IdentityServer_EndDevicePictureValidationError{
						field:  "disable_upload",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return Configuration_Cluster_IdentityServer_EndDevicePictureValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// Configuration_Cluster_IdentityServer_EndDevicePictureValidationError is the
// validation error returned by
// Configuration_Cluster_IdentityServer_EndDevicePicture.ValidateFields if the
// designated constraints aren't met.
type Configuration_Cluster_IdentityServer_EndDevicePictureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Configuration_Cluster_IdentityServer_EndDevicePictureValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e Configuration_Cluster_IdentityServer_EndDevicePictureValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e Configuration_Cluster_IdentityServer_EndDevicePictureValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e Configuration_Cluster_IdentityServer_EndDevicePictureValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e Configuration_Cluster_IdentityServer_EndDevicePictureValidationError) ErrorName() string {
	return "Configuration_Cluster_IdentityServer_EndDevicePictureValidationError"
}

// Error satisfies the builtin error interface
func (e Configuration_Cluster_IdentityServer_EndDevicePictureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfiguration_Cluster_IdentityServer_EndDevicePicture.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Configuration_Cluster_IdentityServer_EndDevicePictureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Configuration_Cluster_IdentityServer_EndDevicePictureValidationError{}

// ValidateFields checks the field values on
// Configuration_Cluster_IdentityServer_UserRights with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Configuration_Cluster_IdentityServer_UserRights) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = Configuration_Cluster_IdentityServer_UserRightsFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "create_applications":

			if v, ok := interface{}(m.GetCreateApplications()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_Cluster_IdentityServer_UserRightsValidationError{
						field:  "create_applications",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "create_clients":

			if v, ok := interface{}(m.GetCreateClients()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_Cluster_IdentityServer_UserRightsValidationError{
						field:  "create_clients",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "create_gateways":

			if v, ok := interface{}(m.GetCreateGateways()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_Cluster_IdentityServer_UserRightsValidationError{
						field:  "create_gateways",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "create_organizations":

			if v, ok := interface{}(m.GetCreateOrganizations()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_Cluster_IdentityServer_UserRightsValidationError{
						field:  "create_organizations",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return Configuration_Cluster_IdentityServer_UserRightsValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// Configuration_Cluster_IdentityServer_UserRightsValidationError is the
// validation error returned by
// Configuration_Cluster_IdentityServer_UserRights.ValidateFields if the
// designated constraints aren't met.
type Configuration_Cluster_IdentityServer_UserRightsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Configuration_Cluster_IdentityServer_UserRightsValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e Configuration_Cluster_IdentityServer_UserRightsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e Configuration_Cluster_IdentityServer_UserRightsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Configuration_Cluster_IdentityServer_UserRightsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Configuration_Cluster_IdentityServer_UserRightsValidationError) ErrorName() string {
	return "Configuration_Cluster_IdentityServer_UserRightsValidationError"
}

// Error satisfies the builtin error interface
func (e Configuration_Cluster_IdentityServer_UserRightsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfiguration_Cluster_IdentityServer_UserRights.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Configuration_Cluster_IdentityServer_UserRightsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Configuration_Cluster_IdentityServer_UserRightsValidationError{}

// ValidateFields checks the field values on
// Configuration_Cluster_IdentityServer_OAuth with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Configuration_Cluster_IdentityServer_OAuth) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = Configuration_Cluster_IdentityServer_OAuthFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "providers":

			if v, ok := interface{}(m.GetProviders()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_Cluster_IdentityServer_OAuthValidationError{
						field:  "providers",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return Configuration_Cluster_IdentityServer_OAuthValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// Configuration_Cluster_IdentityServer_OAuthValidationError is the validation
// error returned by Configuration_Cluster_IdentityServer_OAuth.ValidateFields
// if the designated constraints aren't met.
type Configuration_Cluster_IdentityServer_OAuthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Configuration_Cluster_IdentityServer_OAuthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Configuration_Cluster_IdentityServer_OAuthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Configuration_Cluster_IdentityServer_OAuthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Configuration_Cluster_IdentityServer_OAuthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Configuration_Cluster_IdentityServer_OAuthValidationError) ErrorName() string {
	return "Configuration_Cluster_IdentityServer_OAuthValidationError"
}

// Error satisfies the builtin error interface
func (e Configuration_Cluster_IdentityServer_OAuthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfiguration_Cluster_IdentityServer_OAuth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Configuration_Cluster_IdentityServer_OAuthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Configuration_Cluster_IdentityServer_OAuthValidationError{}

// ValidateFields checks the field values on
// Configuration_Cluster_IdentityServer_UserRegistration_Invitation with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Configuration_Cluster_IdentityServer_UserRegistration_Invitation) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = Configuration_Cluster_IdentityServer_UserRegistration_InvitationFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "required":

			if v, ok := interface{}(m.GetRequired()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_Cluster_IdentityServer_UserRegistration_InvitationValidationError{
						field:  "required",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "token_ttl":

			if v, ok := interface{}(m.GetTokenTTL()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_Cluster_IdentityServer_UserRegistration_InvitationValidationError{
						field:  "token_ttl",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return Configuration_Cluster_IdentityServer_UserRegistration_InvitationValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// Configuration_Cluster_IdentityServer_UserRegistration_InvitationValidationError
// is the validation error returned by
// Configuration_Cluster_IdentityServer_UserRegistration_Invitation.ValidateFields
// if the designated constraints aren't met.
type Configuration_Cluster_IdentityServer_UserRegistration_InvitationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Configuration_Cluster_IdentityServer_UserRegistration_InvitationValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e Configuration_Cluster_IdentityServer_UserRegistration_InvitationValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e Configuration_Cluster_IdentityServer_UserRegistration_InvitationValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e Configuration_Cluster_IdentityServer_UserRegistration_InvitationValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e Configuration_Cluster_IdentityServer_UserRegistration_InvitationValidationError) ErrorName() string {
	return "Configuration_Cluster_IdentityServer_UserRegistration_InvitationValidationError"
}

// Error satisfies the builtin error interface
func (e Configuration_Cluster_IdentityServer_UserRegistration_InvitationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfiguration_Cluster_IdentityServer_UserRegistration_Invitation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Configuration_Cluster_IdentityServer_UserRegistration_InvitationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Configuration_Cluster_IdentityServer_UserRegistration_InvitationValidationError{}

// ValidateFields checks the field values on
// Configuration_Cluster_IdentityServer_UserRegistration_ContactInfoValidation
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *Configuration_Cluster_IdentityServer_UserRegistration_ContactInfoValidation) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = Configuration_Cluster_IdentityServer_UserRegistration_ContactInfoValidationFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "required":

			if v, ok := interface{}(m.GetRequired()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_Cluster_IdentityServer_UserRegistration_ContactInfoValidationValidationError{
						field:  "required",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return Configuration_Cluster_IdentityServer_UserRegistration_ContactInfoValidationValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// Configuration_Cluster_IdentityServer_UserRegistration_ContactInfoValidationValidationError
// is the validation error returned by
// Configuration_Cluster_IdentityServer_UserRegistration_ContactInfoValidation.ValidateFields
// if the designated constraints aren't met.
type Configuration_Cluster_IdentityServer_UserRegistration_ContactInfoValidationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Configuration_Cluster_IdentityServer_UserRegistration_ContactInfoValidationValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e Configuration_Cluster_IdentityServer_UserRegistration_ContactInfoValidationValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e Configuration_Cluster_IdentityServer_UserRegistration_ContactInfoValidationValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e Configuration_Cluster_IdentityServer_UserRegistration_ContactInfoValidationValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e Configuration_Cluster_IdentityServer_UserRegistration_ContactInfoValidationValidationError) ErrorName() string {
	return "Configuration_Cluster_IdentityServer_UserRegistration_ContactInfoValidationValidationError"
}

// Error satisfies the builtin error interface
func (e Configuration_Cluster_IdentityServer_UserRegistration_ContactInfoValidationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfiguration_Cluster_IdentityServer_UserRegistration_ContactInfoValidation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Configuration_Cluster_IdentityServer_UserRegistration_ContactInfoValidationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Configuration_Cluster_IdentityServer_UserRegistration_ContactInfoValidationValidationError{}

// ValidateFields checks the field values on
// Configuration_Cluster_IdentityServer_UserRegistration_AdminApproval with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *Configuration_Cluster_IdentityServer_UserRegistration_AdminApproval) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = Configuration_Cluster_IdentityServer_UserRegistration_AdminApprovalFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "required":

			if v, ok := interface{}(m.GetRequired()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_Cluster_IdentityServer_UserRegistration_AdminApprovalValidationError{
						field:  "required",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return Configuration_Cluster_IdentityServer_UserRegistration_AdminApprovalValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// Configuration_Cluster_IdentityServer_UserRegistration_AdminApprovalValidationError
// is the validation error returned by
// Configuration_Cluster_IdentityServer_UserRegistration_AdminApproval.ValidateFields
// if the designated constraints aren't met.
type Configuration_Cluster_IdentityServer_UserRegistration_AdminApprovalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Configuration_Cluster_IdentityServer_UserRegistration_AdminApprovalValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e Configuration_Cluster_IdentityServer_UserRegistration_AdminApprovalValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e Configuration_Cluster_IdentityServer_UserRegistration_AdminApprovalValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e Configuration_Cluster_IdentityServer_UserRegistration_AdminApprovalValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e Configuration_Cluster_IdentityServer_UserRegistration_AdminApprovalValidationError) ErrorName() string {
	return "Configuration_Cluster_IdentityServer_UserRegistration_AdminApprovalValidationError"
}

// Error satisfies the builtin error interface
func (e Configuration_Cluster_IdentityServer_UserRegistration_AdminApprovalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfiguration_Cluster_IdentityServer_UserRegistration_AdminApproval.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Configuration_Cluster_IdentityServer_UserRegistration_AdminApprovalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Configuration_Cluster_IdentityServer_UserRegistration_AdminApprovalValidationError{}

// ValidateFields checks the field values on
// Configuration_Cluster_IdentityServer_UserRegistration_PasswordRequirements
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *Configuration_Cluster_IdentityServer_UserRegistration_PasswordRequirements) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = Configuration_Cluster_IdentityServer_UserRegistration_PasswordRequirementsFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "min_length":

			if v, ok := interface{}(m.GetMinLength()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_Cluster_IdentityServer_UserRegistration_PasswordRequirementsValidationError{
						field:  "min_length",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "max_length":

			if v, ok := interface{}(m.GetMaxLength()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_Cluster_IdentityServer_UserRegistration_PasswordRequirementsValidationError{
						field:  "max_length",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "min_uppercase":

			if v, ok := interface{}(m.GetMinUppercase()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_Cluster_IdentityServer_UserRegistration_PasswordRequirementsValidationError{
						field:  "min_uppercase",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "min_digits":

			if v, ok := interface{}(m.GetMinDigits()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_Cluster_IdentityServer_UserRegistration_PasswordRequirementsValidationError{
						field:  "min_digits",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "min_special":

			if v, ok := interface{}(m.GetMinSpecial()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_Cluster_IdentityServer_UserRegistration_PasswordRequirementsValidationError{
						field:  "min_special",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return Configuration_Cluster_IdentityServer_UserRegistration_PasswordRequirementsValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// Configuration_Cluster_IdentityServer_UserRegistration_PasswordRequirementsValidationError
// is the validation error returned by
// Configuration_Cluster_IdentityServer_UserRegistration_PasswordRequirements.ValidateFields
// if the designated constraints aren't met.
type Configuration_Cluster_IdentityServer_UserRegistration_PasswordRequirementsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Configuration_Cluster_IdentityServer_UserRegistration_PasswordRequirementsValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e Configuration_Cluster_IdentityServer_UserRegistration_PasswordRequirementsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e Configuration_Cluster_IdentityServer_UserRegistration_PasswordRequirementsValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e Configuration_Cluster_IdentityServer_UserRegistration_PasswordRequirementsValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e Configuration_Cluster_IdentityServer_UserRegistration_PasswordRequirementsValidationError) ErrorName() string {
	return "Configuration_Cluster_IdentityServer_UserRegistration_PasswordRequirementsValidationError"
}

// Error satisfies the builtin error interface
func (e Configuration_Cluster_IdentityServer_UserRegistration_PasswordRequirementsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfiguration_Cluster_IdentityServer_UserRegistration_PasswordRequirements.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Configuration_Cluster_IdentityServer_UserRegistration_PasswordRequirementsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Configuration_Cluster_IdentityServer_UserRegistration_PasswordRequirementsValidationError{}

// ValidateFields checks the field values on
// Configuration_Cluster_IdentityServer_OAuth_AuthProviders with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Configuration_Cluster_IdentityServer_OAuth_AuthProviders) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = Configuration_Cluster_IdentityServer_OAuth_AuthProvidersFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "oidc":

			if v, ok := interface{}(m.GetOIDC()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_Cluster_IdentityServer_OAuth_AuthProvidersValidationError{
						field:  "oidc",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return Configuration_Cluster_IdentityServer_OAuth_AuthProvidersValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// Configuration_Cluster_IdentityServer_OAuth_AuthProvidersValidationError is
// the validation error returned by
// Configuration_Cluster_IdentityServer_OAuth_AuthProviders.ValidateFields if
// the designated constraints aren't met.
type Configuration_Cluster_IdentityServer_OAuth_AuthProvidersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Configuration_Cluster_IdentityServer_OAuth_AuthProvidersValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e Configuration_Cluster_IdentityServer_OAuth_AuthProvidersValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e Configuration_Cluster_IdentityServer_OAuth_AuthProvidersValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e Configuration_Cluster_IdentityServer_OAuth_AuthProvidersValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e Configuration_Cluster_IdentityServer_OAuth_AuthProvidersValidationError) ErrorName() string {
	return "Configuration_Cluster_IdentityServer_OAuth_AuthProvidersValidationError"
}

// Error satisfies the builtin error interface
func (e Configuration_Cluster_IdentityServer_OAuth_AuthProvidersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfiguration_Cluster_IdentityServer_OAuth_AuthProviders.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Configuration_Cluster_IdentityServer_OAuth_AuthProvidersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Configuration_Cluster_IdentityServer_OAuth_AuthProvidersValidationError{}

// ValidateFields checks the field values on
// Configuration_Cluster_IdentityServer_OAuth_AuthProviders_Shared with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Configuration_Cluster_IdentityServer_OAuth_AuthProviders_Shared) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = Configuration_Cluster_IdentityServer_OAuth_AuthProviders_SharedFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "name":
			// no validation rules for Name
		case "allow_registrations":
			// no validation rules for AllowRegistrations
		default:
			return Configuration_Cluster_IdentityServer_OAuth_AuthProviders_SharedValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// Configuration_Cluster_IdentityServer_OAuth_AuthProviders_SharedValidationError
// is the validation error returned by
// Configuration_Cluster_IdentityServer_OAuth_AuthProviders_Shared.ValidateFields
// if the designated constraints aren't met.
type Configuration_Cluster_IdentityServer_OAuth_AuthProviders_SharedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Configuration_Cluster_IdentityServer_OAuth_AuthProviders_SharedValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e Configuration_Cluster_IdentityServer_OAuth_AuthProviders_SharedValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e Configuration_Cluster_IdentityServer_OAuth_AuthProviders_SharedValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e Configuration_Cluster_IdentityServer_OAuth_AuthProviders_SharedValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e Configuration_Cluster_IdentityServer_OAuth_AuthProviders_SharedValidationError) ErrorName() string {
	return "Configuration_Cluster_IdentityServer_OAuth_AuthProviders_SharedValidationError"
}

// Error satisfies the builtin error interface
func (e Configuration_Cluster_IdentityServer_OAuth_AuthProviders_SharedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfiguration_Cluster_IdentityServer_OAuth_AuthProviders_Shared.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Configuration_Cluster_IdentityServer_OAuth_AuthProviders_SharedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Configuration_Cluster_IdentityServer_OAuth_AuthProviders_SharedValidationError{}

// ValidateFields checks the field values on
// Configuration_Cluster_IdentityServer_OAuth_AuthProviders_OpenIDConnect with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *Configuration_Cluster_IdentityServer_OAuth_AuthProviders_OpenIDConnect) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = Configuration_Cluster_IdentityServer_OAuth_AuthProviders_OpenIDConnectFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "shared":

			if v, ok := interface{}(&m.Configuration_Cluster_IdentityServer_OAuth_AuthProviders_Shared).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Configuration_Cluster_IdentityServer_OAuth_AuthProviders_OpenIDConnectValidationError{
						field:  "shared",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "client_id":
			// no validation rules for ClientID
		case "client_secret":
			// no validation rules for ClientSecret
		case "redirect_url":
			// no validation rules for RedirectURL
		case "provider_url":
			// no validation rules for ProviderURL
		default:
			return Configuration_Cluster_IdentityServer_OAuth_AuthProviders_OpenIDConnectValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// Configuration_Cluster_IdentityServer_OAuth_AuthProviders_OpenIDConnectValidationError
// is the validation error returned by
// Configuration_Cluster_IdentityServer_OAuth_AuthProviders_OpenIDConnect.ValidateFields
// if the designated constraints aren't met.
type Configuration_Cluster_IdentityServer_OAuth_AuthProviders_OpenIDConnectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Configuration_Cluster_IdentityServer_OAuth_AuthProviders_OpenIDConnectValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e Configuration_Cluster_IdentityServer_OAuth_AuthProviders_OpenIDConnectValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e Configuration_Cluster_IdentityServer_OAuth_AuthProviders_OpenIDConnectValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e Configuration_Cluster_IdentityServer_OAuth_AuthProviders_OpenIDConnectValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e Configuration_Cluster_IdentityServer_OAuth_AuthProviders_OpenIDConnectValidationError) ErrorName() string {
	return "Configuration_Cluster_IdentityServer_OAuth_AuthProviders_OpenIDConnectValidationError"
}

// Error satisfies the builtin error interface
func (e Configuration_Cluster_IdentityServer_OAuth_AuthProviders_OpenIDConnectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfiguration_Cluster_IdentityServer_OAuth_AuthProviders_OpenIDConnect.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Configuration_Cluster_IdentityServer_OAuth_AuthProviders_OpenIDConnectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Configuration_Cluster_IdentityServer_OAuth_AuthProviders_OpenIDConnectValidationError{}
