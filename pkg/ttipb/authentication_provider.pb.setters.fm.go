// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttipb

import (
	fmt "fmt"
	time "time"
)

func (dst *AuthenticationProviderIdentifiers) SetFields(src *AuthenticationProviderIdentifiers, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "provider_id":
			if len(subs) > 0 {
				return fmt.Errorf("'provider_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ProviderID = src.ProviderID
			} else {
				var zero string
				dst.ProviderID = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *AuthenticationProvider) SetFields(src *AuthenticationProvider, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "ids":
			if len(subs) > 0 {
				var newDst, newSrc *AuthenticationProviderIdentifiers
				if src != nil {
					newSrc = &src.AuthenticationProviderIdentifiers
				}
				newDst = &dst.AuthenticationProviderIdentifiers
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.AuthenticationProviderIdentifiers = src.AuthenticationProviderIdentifiers
				} else {
					var zero AuthenticationProviderIdentifiers
					dst.AuthenticationProviderIdentifiers = zero
				}
			}
		case "created_at":
			if len(subs) > 0 {
				return fmt.Errorf("'created_at' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.CreatedAt = src.CreatedAt
			} else {
				var zero time.Time
				dst.CreatedAt = zero
			}
		case "updated_at":
			if len(subs) > 0 {
				return fmt.Errorf("'updated_at' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.UpdatedAt = src.UpdatedAt
			} else {
				var zero time.Time
				dst.UpdatedAt = zero
			}
		case "name":
			if len(subs) > 0 {
				return fmt.Errorf("'name' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Name = src.Name
			} else {
				var zero string
				dst.Name = zero
			}
		case "allow_registrations":
			if len(subs) > 0 {
				return fmt.Errorf("'allow_registrations' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.AllowRegistrations = src.AllowRegistrations
			} else {
				var zero bool
				dst.AllowRegistrations = zero
			}
		case "configuration":
			if len(subs) > 0 {
				var newDst, newSrc *AuthenticationProvider_Configuration
				if (src == nil || src.Configuration == nil) && dst.Configuration == nil {
					continue
				}
				if src != nil {
					newSrc = src.Configuration
				}
				if dst.Configuration != nil {
					newDst = dst.Configuration
				} else {
					newDst = &AuthenticationProvider_Configuration{}
					dst.Configuration = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Configuration = src.Configuration
				} else {
					dst.Configuration = nil
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *AuthenticationProvider_OIDC) SetFields(src *AuthenticationProvider_OIDC, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "client_id":
			if len(subs) > 0 {
				return fmt.Errorf("'client_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ClientID = src.ClientID
			} else {
				var zero string
				dst.ClientID = zero
			}
		case "client_secret":
			if len(subs) > 0 {
				return fmt.Errorf("'client_secret' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ClientSecret = src.ClientSecret
			} else {
				var zero string
				dst.ClientSecret = zero
			}
		case "provider_url":
			if len(subs) > 0 {
				return fmt.Errorf("'provider_url' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ProviderURL = src.ProviderURL
			} else {
				var zero string
				dst.ProviderURL = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *AuthenticationProvider_Configuration) SetFields(src *AuthenticationProvider_Configuration, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {

		case "provider":
			if len(subs) == 0 && src == nil {
				dst.Provider = nil
				continue
			} else if len(subs) == 0 {
				dst.Provider = src.Provider
				continue
			}

			subPathMap := _processPaths(subs)
			if len(subPathMap) > 1 {
				return fmt.Errorf("more than one field specified for oneof field '%s'", name)
			}
			for oneofName, oneofSubs := range subPathMap {
				switch oneofName {
				case "oidc":
					_, srcOk := src.Provider.(*AuthenticationProvider_Configuration_OIDC)
					if !srcOk && src.Provider != nil {
						return fmt.Errorf("attempt to set oneof 'oidc', while different oneof is set in source")
					}
					_, dstOk := dst.Provider.(*AuthenticationProvider_Configuration_OIDC)
					if !dstOk && dst.Provider != nil {
						return fmt.Errorf("attempt to set oneof 'oidc', while different oneof is set in destination")
					}
					if len(oneofSubs) > 0 {
						var newDst, newSrc *AuthenticationProvider_OIDC
						if !srcOk && !dstOk {
							continue
						}
						if srcOk {
							newSrc = src.Provider.(*AuthenticationProvider_Configuration_OIDC).OIDC
						}
						if dstOk {
							newDst = dst.Provider.(*AuthenticationProvider_Configuration_OIDC).OIDC
						} else {
							newDst = &AuthenticationProvider_OIDC{}
							dst.Provider = &AuthenticationProvider_Configuration_OIDC{OIDC: newDst}
						}
						if err := newDst.SetFields(newSrc, oneofSubs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Provider = src.Provider
						} else {
							dst.Provider = nil
						}
					}

				default:
					return fmt.Errorf("invalid oneof field: '%s.%s'", name, oneofName)
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}
