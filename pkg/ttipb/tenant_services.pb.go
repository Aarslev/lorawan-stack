// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/tti/tenant_services.proto

package ttipb

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	go_thethings_network_lorawan_stack_pkg_types "go.thethings.network/lorawan-stack/pkg/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GetTenantIdentifiersForEndDeviceEUIsRequest struct {
	JoinEUI              go_thethings_network_lorawan_stack_pkg_types.EUI64 `protobuf:"bytes,1,opt,name=join_eui,json=joinEui,proto3,customtype=go.thethings.network/lorawan-stack/pkg/types.EUI64" json:"join_eui"`
	DevEUI               go_thethings_network_lorawan_stack_pkg_types.EUI64 `protobuf:"bytes,2,opt,name=dev_eui,json=devEui,proto3,customtype=go.thethings.network/lorawan-stack/pkg/types.EUI64" json:"dev_eui"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *GetTenantIdentifiersForEndDeviceEUIsRequest) Reset() {
	*m = GetTenantIdentifiersForEndDeviceEUIsRequest{}
}
func (*GetTenantIdentifiersForEndDeviceEUIsRequest) ProtoMessage() {}
func (*GetTenantIdentifiersForEndDeviceEUIsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f411f114fe8fe8a6, []int{0}
}
func (m *GetTenantIdentifiersForEndDeviceEUIsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTenantIdentifiersForEndDeviceEUIsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTenantIdentifiersForEndDeviceEUIsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTenantIdentifiersForEndDeviceEUIsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTenantIdentifiersForEndDeviceEUIsRequest.Merge(m, src)
}
func (m *GetTenantIdentifiersForEndDeviceEUIsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTenantIdentifiersForEndDeviceEUIsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTenantIdentifiersForEndDeviceEUIsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTenantIdentifiersForEndDeviceEUIsRequest proto.InternalMessageInfo

type GetTenantIdentifiersForGatewayEUIRequest struct {
	EUI                  go_thethings_network_lorawan_stack_pkg_types.EUI64 `protobuf:"bytes,1,opt,name=eui,proto3,customtype=go.thethings.network/lorawan-stack/pkg/types.EUI64" json:"eui"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *GetTenantIdentifiersForGatewayEUIRequest) Reset() {
	*m = GetTenantIdentifiersForGatewayEUIRequest{}
}
func (*GetTenantIdentifiersForGatewayEUIRequest) ProtoMessage() {}
func (*GetTenantIdentifiersForGatewayEUIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f411f114fe8fe8a6, []int{1}
}
func (m *GetTenantIdentifiersForGatewayEUIRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTenantIdentifiersForGatewayEUIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTenantIdentifiersForGatewayEUIRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTenantIdentifiersForGatewayEUIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTenantIdentifiersForGatewayEUIRequest.Merge(m, src)
}
func (m *GetTenantIdentifiersForGatewayEUIRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTenantIdentifiersForGatewayEUIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTenantIdentifiersForGatewayEUIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTenantIdentifiersForGatewayEUIRequest proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GetTenantIdentifiersForEndDeviceEUIsRequest)(nil), "tti.lorawan.v3.GetTenantIdentifiersForEndDeviceEUIsRequest")
	golang_proto.RegisterType((*GetTenantIdentifiersForEndDeviceEUIsRequest)(nil), "tti.lorawan.v3.GetTenantIdentifiersForEndDeviceEUIsRequest")
	proto.RegisterType((*GetTenantIdentifiersForGatewayEUIRequest)(nil), "tti.lorawan.v3.GetTenantIdentifiersForGatewayEUIRequest")
	golang_proto.RegisterType((*GetTenantIdentifiersForGatewayEUIRequest)(nil), "tti.lorawan.v3.GetTenantIdentifiersForGatewayEUIRequest")
}

func init() {
	proto.RegisterFile("lorawan-stack/api/tti/tenant_services.proto", fileDescriptor_f411f114fe8fe8a6)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/tti/tenant_services.proto", fileDescriptor_f411f114fe8fe8a6)
}

var fileDescriptor_f411f114fe8fe8a6 = []byte{
	// 680 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0x31, 0x4c, 0x14, 0x41,
	0x14, 0x86, 0x67, 0xc0, 0x1c, 0x64, 0xa2, 0xc4, 0x8c, 0x06, 0xcd, 0x42, 0xde, 0xc1, 0x6a, 0x02,
	0x01, 0xd9, 0x4d, 0xc0, 0x18, 0xa3, 0x95, 0x78, 0xeb, 0xe5, 0x8c, 0x15, 0x7a, 0x0d, 0x89, 0xc1,
	0x3d, 0x6e, 0xd8, 0x1b, 0x81, 0x9d, 0x63, 0x77, 0xee, 0xc8, 0x69, 0x88, 0x84, 0x8a, 0xd2, 0xc4,
	0xc6, 0xd2, 0x58, 0x51, 0x52, 0x52, 0x52, 0x52, 0x92, 0xd8, 0x10, 0x0b, 0xc2, 0xed, 0x5a, 0x50,
	0x19, 0x4a, 0x4a, 0xb3, 0xb3, 0x7b, 0x87, 0xc0, 0x01, 0x97, 0xd0, 0xed, 0xce, 0xbc, 0xf9, 0xfe,
	0xf7, 0xbf, 0x99, 0x9f, 0x8c, 0x2e, 0x08, 0xcf, 0x5e, 0xb6, 0xdd, 0x31, 0x5f, 0xda, 0xb3, 0xf3,
	0xa6, 0x5d, 0xe6, 0xa6, 0x94, 0xdc, 0x94, 0xcc, 0xb5, 0x5d, 0x39, 0xe3, 0x33, 0xaf, 0xca, 0x67,
	0x99, 0x6f, 0x94, 0x3d, 0x21, 0x05, 0xed, 0x91, 0x92, 0x1b, 0xc9, 0x01, 0xa3, 0x3a, 0xa1, 0x8d,
	0x39, 0x5c, 0x96, 0x2a, 0x05, 0x63, 0x56, 0x2c, 0x9a, 0x8e, 0x70, 0x84, 0xa9, 0xca, 0x0a, 0x95,
	0x39, 0xf5, 0xa7, 0x7e, 0xd4, 0x57, 0x7c, 0x5c, 0xeb, 0x77, 0x84, 0x70, 0x16, 0x98, 0x12, 0xb1,
	0x5d, 0x57, 0x48, 0x5b, 0x72, 0xe1, 0x26, 0x70, 0xad, 0x2f, 0xd9, 0x6d, 0x32, 0xd8, 0x62, 0x59,
	0xd6, 0x92, 0xcd, 0xa1, 0xd6, 0x6d, 0xf2, 0x22, 0x73, 0x25, 0x9f, 0xe3, 0xcc, 0x6b, 0x50, 0xf4,
	0xcb, 0xfc, 0xc4, 0x35, 0xfa, 0x5f, 0x4c, 0x46, 0xb3, 0x4c, 0xbe, 0x53, 0x6b, 0xb9, 0x13, 0xc4,
	0x2b, 0xe1, 0x59, 0x6e, 0x31, 0xc3, 0x22, 0xcb, 0x56, 0x3e, 0xe7, 0x4f, 0xb1, 0xa5, 0x0a, 0xf3,
	0x25, 0xfd, 0x40, 0xba, 0x3f, 0x0a, 0xee, 0xce, 0xb0, 0x0a, 0xbf, 0x8f, 0x07, 0xf0, 0xf0, 0xcd,
	0x49, 0x6b, 0x67, 0x3f, 0x8d, 0x7e, 0xef, 0xa7, 0xc7, 0x1d, 0x61, 0xc8, 0x12, 0x93, 0x25, 0xee,
	0x3a, 0xbe, 0xe1, 0x32, 0xb9, 0x2c, 0xbc, 0x79, 0xf3, 0x74, 0x0b, 0xe5, 0x79, 0xc7, 0x94, 0xb5,
	0x32, 0xf3, 0x0d, 0x2b, 0x9f, 0x7b, 0xf2, 0x38, 0xd8, 0x4f, 0x77, 0xbd, 0x16, 0xdc, 0xb5, 0xf2,
	0xb9, 0xa9, 0xae, 0x08, 0x6b, 0x55, 0x38, 0x7d, 0x4f, 0xba, 0x8a, 0xac, 0xaa, 0x04, 0x3a, 0x94,
	0x40, 0xe6, 0x5a, 0x02, 0xa9, 0x0c, 0xab, 0x46, 0xfc, 0x54, 0x91, 0x55, 0xad, 0x0a, 0xd7, 0xbf,
	0x90, 0xe1, 0x0b, 0xfc, 0x66, 0x6d, 0xc9, 0x96, 0xed, 0x5a, 0x54, 0x9c, 0x98, 0x7d, 0x4b, 0x3a,
	0x4f, 0x7c, 0xbe, 0xb8, 0x56, 0x1b, 0x9d, 0x11, 0x36, 0xa2, 0x8d, 0xaf, 0xa5, 0x48, 0x4f, 0x2c,
	0x3f, 0xc5, 0x1c, 0xee, 0x4b, 0xaf, 0x46, 0xa7, 0x49, 0xea, 0xa5, 0xc7, 0x6c, 0xc9, 0xe8, 0x03,
	0xe3, 0xf4, 0xb3, 0x32, 0xe2, 0xf5, 0x46, 0xbd, 0x6a, 0x4b, 0xeb, 0x3d, 0x5b, 0x14, 0x6f, 0xeb,
	0x77, 0xd6, 0x7e, 0xfd, 0xf9, 0xd6, 0x71, 0x4b, 0xef, 0x4e, 0xae, 0xd8, 0x7f, 0x86, 0x47, 0x68,
	0x89, 0x74, 0x66, 0x99, 0xa4, 0x03, 0x67, 0xcf, 0x34, 0x87, 0x70, 0x15, 0x75, 0x48, 0x51, 0x07,
	0x69, 0xba, 0x41, 0x35, 0x3f, 0x27, 0x89, 0xe0, 0x45, 0xdf, 0x68, 0x7e, 0xae, 0xd0, 0x3c, 0xb9,
	0xf1, 0x86, 0xfb, 0x92, 0xea, 0x67, 0x41, 0xd1, 0x6a, 0x0c, 0x6b, 0x3c, 0x23, 0xed, 0x5e, 0x6b,
	0x31, 0x5f, 0xbf, 0xad, 0xd4, 0x08, 0x6d, 0x7a, 0xa0, 0x4b, 0x24, 0x95, 0x2f, 0x17, 0x5b, 0x0e,
	0x27, 0x5e, 0x6f, 0xcf, 0xc6, 0x88, 0x02, 0x3f, 0xd4, 0xce, 0xd9, 0x30, 0x4e, 0xdb, 0x88, 0x66,
	0x66, 0x93, 0x54, 0x86, 0x2d, 0x30, 0xc9, 0xe8, 0x60, 0x6b, 0xda, 0x7f, 0x0f, 0x47, 0xeb, 0x35,
	0xe2, 0xb0, 0x1a, 0x8d, 0xb0, 0x1a, 0x56, 0x14, 0x56, 0xbd, 0x5f, 0x09, 0xf6, 0x8e, 0xdc, 0x6d,
	0x31, 0xb7, 0x15, 0xba, 0x8a, 0x09, 0x64, 0xd9, 0x65, 0x89, 0xa3, 0xcf, 0x2f, 0xbc, 0xb2, 0xab,
	0x73, 0xaa, 0x5d, 0xdd, 0x38, 0xfd, 0x44, 0xfa, 0xce, 0x75, 0x70, 0x92, 0x01, 0xfa, 0xb4, 0x4d,
	0xf9, 0x73, 0xb1, 0x69, 0x43, 0x7b, 0xf2, 0x27, 0xde, 0xa9, 0x03, 0xde, 0xad, 0x03, 0xde, 0xab,
	0x03, 0x3a, 0xa8, 0x03, 0x3a, 0xac, 0x03, 0x3a, 0xaa, 0x03, 0x3a, 0xae, 0x03, 0x5e, 0x0d, 0x00,
	0xaf, 0x07, 0x80, 0x36, 0x02, 0xc0, 0x9b, 0x01, 0xa0, 0xad, 0x00, 0xd0, 0x76, 0x00, 0x68, 0x27,
	0x00, 0xbc, 0x1b, 0x00, 0xde, 0x0b, 0x00, 0x1d, 0x04, 0x80, 0x0f, 0x03, 0x40, 0x47, 0x01, 0xe0,
	0xe3, 0x00, 0xd0, 0x6a, 0x08, 0x68, 0x3d, 0x04, 0xfc, 0x35, 0x04, 0xf4, 0x3d, 0x04, 0xfc, 0x23,
	0x04, 0xb4, 0x11, 0x02, 0xda, 0x0c, 0x01, 0x6f, 0x85, 0x80, 0xb7, 0x43, 0xc0, 0xd3, 0x8f, 0xda,
	0xcd, 0xae, 0xe4, 0xe5, 0x42, 0x21, 0xa5, 0x6e, 0x74, 0xe2, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xcc, 0x03, 0xad, 0x78, 0x18, 0x06, 0x00, 0x00,
}

func (this *GetTenantIdentifiersForEndDeviceEUIsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetTenantIdentifiersForEndDeviceEUIsRequest)
	if !ok {
		that2, ok := that.(GetTenantIdentifiersForEndDeviceEUIsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JoinEUI.Equal(that1.JoinEUI) {
		return false
	}
	if !this.DevEUI.Equal(that1.DevEUI) {
		return false
	}
	return true
}
func (this *GetTenantIdentifiersForGatewayEUIRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetTenantIdentifiersForGatewayEUIRequest)
	if !ok {
		that2, ok := that.(GetTenantIdentifiersForGatewayEUIRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EUI.Equal(that1.EUI) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TenantRegistryClient is the client API for TenantRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TenantRegistryClient interface {
	Create(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*Tenant, error)
	Get(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption) (*Tenant, error)
	List(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (*Tenants, error)
	Update(ctx context.Context, in *UpdateTenantRequest, opts ...grpc.CallOption) (*Tenant, error)
	Delete(ctx context.Context, in *TenantIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
	GetIdentifiersForEndDeviceEUIs(ctx context.Context, in *GetTenantIdentifiersForEndDeviceEUIsRequest, opts ...grpc.CallOption) (*TenantIdentifiers, error)
	GetIdentifiersForGatewayEUI(ctx context.Context, in *GetTenantIdentifiersForGatewayEUIRequest, opts ...grpc.CallOption) (*TenantIdentifiers, error)
}

type tenantRegistryClient struct {
	cc *grpc.ClientConn
}

func NewTenantRegistryClient(cc *grpc.ClientConn) TenantRegistryClient {
	return &tenantRegistryClient{cc}
}

func (c *tenantRegistryClient) Create(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*Tenant, error) {
	out := new(Tenant)
	err := c.cc.Invoke(ctx, "/tti.lorawan.v3.TenantRegistry/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantRegistryClient) Get(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption) (*Tenant, error) {
	out := new(Tenant)
	err := c.cc.Invoke(ctx, "/tti.lorawan.v3.TenantRegistry/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantRegistryClient) List(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (*Tenants, error) {
	out := new(Tenants)
	err := c.cc.Invoke(ctx, "/tti.lorawan.v3.TenantRegistry/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantRegistryClient) Update(ctx context.Context, in *UpdateTenantRequest, opts ...grpc.CallOption) (*Tenant, error) {
	out := new(Tenant)
	err := c.cc.Invoke(ctx, "/tti.lorawan.v3.TenantRegistry/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantRegistryClient) Delete(ctx context.Context, in *TenantIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/tti.lorawan.v3.TenantRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantRegistryClient) GetIdentifiersForEndDeviceEUIs(ctx context.Context, in *GetTenantIdentifiersForEndDeviceEUIsRequest, opts ...grpc.CallOption) (*TenantIdentifiers, error) {
	out := new(TenantIdentifiers)
	err := c.cc.Invoke(ctx, "/tti.lorawan.v3.TenantRegistry/GetIdentifiersForEndDeviceEUIs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantRegistryClient) GetIdentifiersForGatewayEUI(ctx context.Context, in *GetTenantIdentifiersForGatewayEUIRequest, opts ...grpc.CallOption) (*TenantIdentifiers, error) {
	out := new(TenantIdentifiers)
	err := c.cc.Invoke(ctx, "/tti.lorawan.v3.TenantRegistry/GetIdentifiersForGatewayEUI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenantRegistryServer is the server API for TenantRegistry service.
type TenantRegistryServer interface {
	Create(context.Context, *CreateTenantRequest) (*Tenant, error)
	Get(context.Context, *GetTenantRequest) (*Tenant, error)
	List(context.Context, *ListTenantsRequest) (*Tenants, error)
	Update(context.Context, *UpdateTenantRequest) (*Tenant, error)
	Delete(context.Context, *TenantIdentifiers) (*types.Empty, error)
	GetIdentifiersForEndDeviceEUIs(context.Context, *GetTenantIdentifiersForEndDeviceEUIsRequest) (*TenantIdentifiers, error)
	GetIdentifiersForGatewayEUI(context.Context, *GetTenantIdentifiersForGatewayEUIRequest) (*TenantIdentifiers, error)
}

func RegisterTenantRegistryServer(s *grpc.Server, srv TenantRegistryServer) {
	s.RegisterService(&_TenantRegistry_serviceDesc, srv)
}

func _TenantRegistry_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantRegistryServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tti.lorawan.v3.TenantRegistry/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantRegistryServer).Create(ctx, req.(*CreateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantRegistry_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantRegistryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tti.lorawan.v3.TenantRegistry/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantRegistryServer).Get(ctx, req.(*GetTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantRegistry_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTenantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantRegistryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tti.lorawan.v3.TenantRegistry/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantRegistryServer).List(ctx, req.(*ListTenantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantRegistry_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantRegistryServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tti.lorawan.v3.TenantRegistry/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantRegistryServer).Update(ctx, req.(*UpdateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tti.lorawan.v3.TenantRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantRegistryServer).Delete(ctx, req.(*TenantIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantRegistry_GetIdentifiersForEndDeviceEUIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantIdentifiersForEndDeviceEUIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantRegistryServer).GetIdentifiersForEndDeviceEUIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tti.lorawan.v3.TenantRegistry/GetIdentifiersForEndDeviceEUIs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantRegistryServer).GetIdentifiersForEndDeviceEUIs(ctx, req.(*GetTenantIdentifiersForEndDeviceEUIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantRegistry_GetIdentifiersForGatewayEUI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantIdentifiersForGatewayEUIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantRegistryServer).GetIdentifiersForGatewayEUI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tti.lorawan.v3.TenantRegistry/GetIdentifiersForGatewayEUI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantRegistryServer).GetIdentifiersForGatewayEUI(ctx, req.(*GetTenantIdentifiersForGatewayEUIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TenantRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tti.lorawan.v3.TenantRegistry",
	HandlerType: (*TenantRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TenantRegistry_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TenantRegistry_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _TenantRegistry_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TenantRegistry_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TenantRegistry_Delete_Handler,
		},
		{
			MethodName: "GetIdentifiersForEndDeviceEUIs",
			Handler:    _TenantRegistry_GetIdentifiersForEndDeviceEUIs_Handler,
		},
		{
			MethodName: "GetIdentifiersForGatewayEUI",
			Handler:    _TenantRegistry_GetIdentifiersForGatewayEUI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/tti/tenant_services.proto",
}

func (m *GetTenantIdentifiersForEndDeviceEUIsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTenantIdentifiersForEndDeviceEUIsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTenantServices(dAtA, i, uint64(m.JoinEUI.Size()))
	n1, err := m.JoinEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintTenantServices(dAtA, i, uint64(m.DevEUI.Size()))
	n2, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func (m *GetTenantIdentifiersForGatewayEUIRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTenantIdentifiersForGatewayEUIRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTenantServices(dAtA, i, uint64(m.EUI.Size()))
	n3, err := m.EUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	return i, nil
}

func encodeVarintTenantServices(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedGetTenantIdentifiersForEndDeviceEUIsRequest(r randyTenantServices, easy bool) *GetTenantIdentifiersForEndDeviceEUIsRequest {
	this := &GetTenantIdentifiersForEndDeviceEUIsRequest{}
	v1 := go_thethings_network_lorawan_stack_pkg_types.NewPopulatedEUI64(r)
	this.JoinEUI = *v1
	v2 := go_thethings_network_lorawan_stack_pkg_types.NewPopulatedEUI64(r)
	this.DevEUI = *v2
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetTenantIdentifiersForGatewayEUIRequest(r randyTenantServices, easy bool) *GetTenantIdentifiersForGatewayEUIRequest {
	this := &GetTenantIdentifiersForGatewayEUIRequest{}
	v3 := go_thethings_network_lorawan_stack_pkg_types.NewPopulatedEUI64(r)
	this.EUI = *v3
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyTenantServices interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTenantServices(r randyTenantServices) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTenantServices(r randyTenantServices) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneTenantServices(r)
	}
	return string(tmps)
}
func randUnrecognizedTenantServices(r randyTenantServices, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTenantServices(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTenantServices(dAtA []byte, r randyTenantServices, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTenantServices(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateTenantServices(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateTenantServices(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTenantServices(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTenantServices(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTenantServices(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTenantServices(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *GetTenantIdentifiersForEndDeviceEUIsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.JoinEUI.Size()
	n += 1 + l + sovTenantServices(uint64(l))
	l = m.DevEUI.Size()
	n += 1 + l + sovTenantServices(uint64(l))
	return n
}

func (m *GetTenantIdentifiersForGatewayEUIRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EUI.Size()
	n += 1 + l + sovTenantServices(uint64(l))
	return n
}

func sovTenantServices(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTenantServices(x uint64) (n int) {
	return sovTenantServices((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *GetTenantIdentifiersForEndDeviceEUIsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetTenantIdentifiersForEndDeviceEUIsRequest{`,
		`JoinEUI:` + fmt.Sprintf("%v", this.JoinEUI) + `,`,
		`DevEUI:` + fmt.Sprintf("%v", this.DevEUI) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTenantIdentifiersForGatewayEUIRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetTenantIdentifiersForGatewayEUIRequest{`,
		`EUI:` + fmt.Sprintf("%v", this.EUI) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTenantServices(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetTenantIdentifiersForEndDeviceEUIsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenantServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTenantIdentifiersForEndDeviceEUIsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTenantIdentifiersForEndDeviceEUIsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenantServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTenantServices
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTenantServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.JoinEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenantServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTenantServices
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTenantServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenantServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenantServices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTenantServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTenantIdentifiersForGatewayEUIRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenantServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTenantIdentifiersForGatewayEUIRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTenantIdentifiersForGatewayEUIRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenantServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTenantServices
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTenantServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenantServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenantServices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTenantServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTenantServices(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTenantServices
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTenantServices
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTenantServices
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTenantServices
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTenantServices
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTenantServices
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTenantServices(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTenantServices
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTenantServices = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTenantServices   = fmt.Errorf("proto: integer overflow")
)
