// Copyright Â© 2019 The Things Industries B.V.

package microchip_test

import (
	"testing"

	"github.com/smartystreets/assertions"
	. "go.thethings.network/lorawan-stack/pkg/cryptoserver/providers/microchip"
	"go.thethings.network/lorawan-stack/pkg/types"
	"go.thethings.network/lorawan-stack/pkg/util/test/assertions/should"
)

func TestDiversifiedKey(t *testing.T) {
	a := assertions.New(t)

	parentKey := Key{0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF}
	sn := SerialNumber{0x01, 0x23, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x27}

	key := DiversifiedKey(parentKey, sn)
	a.So(key, should.Resemble, Key{0x84, 0xff, 0xb1, 0x28, 0xf4, 0x5d, 0xba, 0x1f, 0xa3, 0x67, 0x7f, 0x75, 0x2b, 0x4d, 0x93, 0x23, 0x49, 0x0d, 0xf6, 0xe6, 0xf4, 0xc4, 0xe9, 0xa4, 0x33, 0x7e, 0x47, 0x4b, 0xf4, 0x73, 0x54, 0xde})
}

func TestDiversifiedRootKeys(t *testing.T) {
	a := assertions.New(t)

	parentKey := Key{0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF}
	sn := SerialNumber{0x01, 0x23, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x27}

	nwkKey, appKey := DiversifiedRootKeys(parentKey, sn)
	a.So(nwkKey, should.Resemble, types.AES128Key{0x84, 0xff, 0xb1, 0x28, 0xf4, 0x5d, 0xba, 0x1f, 0xa3, 0x67, 0x7f, 0x75, 0x2b, 0x4d, 0x93, 0x23})
	a.So(appKey, should.Resemble, types.AES128Key{0x49, 0x0d, 0xf6, 0xe6, 0xf4, 0xc4, 0xe9, 0xa4, 0x33, 0x7e, 0x47, 0x4b, 0xf4, 0x73, 0x54, 0xde})
}

func TestDiversifiedMAC(t *testing.T) {
	a := assertions.New(t)

	parentKey := Key{0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF}
	sn := SerialNumber{0x01, 0x23, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x27}
	challenge := Challenge{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f}

	mac := DiversifiedKeyMAC(parentKey, sn, challenge)
	a.So(mac, should.Resemble, MAC{0xa8, 0x1e, 0xeb, 0x05, 0xa3, 0xac, 0x35, 0xc0, 0x37, 0x33, 0x03, 0x4c, 0xa3, 0x20, 0x37, 0x3d, 0x2f, 0x6d, 0xb3, 0xf9, 0x98, 0x3c, 0x1a, 0xc0, 0x98, 0x3c, 0x04, 0xe8, 0x16, 0xf4, 0x54, 0x79})
}
